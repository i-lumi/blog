/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "i-lumi 博客",
  "description": "web前端技术博客,简洁至上,专注web前端学习与总结。JavaScript,js,ES6,TypeScript,vue,go,css3,html5,Node,git,github等技术文章。",
  "base": "/",
  "headTags": [
    [
      "link",
      {
        "rel": "icon",
        "href": "/img/favicon.ico"
      }
    ],
    [
      "meta",
      {
        "name": "keywords",
        "content": "前端博客,个人技术博客,前端,前端开发,前端框架,web前端,前端面试题,技术文档,学习,面试,JavaScript,js,ES6,TypeScript,vue,python,css3,html5,Node,git,github,markdown"
      }
    ],
    [
      "meta",
      {
        "name": "baidu-site-verification",
        "content": "7F55weZDDc"
      }
    ],
    [
      "meta",
      {
        "name": "theme-color",
        "content": "#11a8cd"
      }
    ]
  ],
  "pages": [
    {
      "title": "前端",
      "frontmatter": {
        "pageComponent": {
          "name": "Catalogue",
          "data": {
            "key": "01.前端",
            "imgUrl": "/img/web.png",
            "description": "JavaScript、ES6、Vue框架等前端技术"
          }
        },
        "title": "前端",
        "date": "2020-03-11T21:50:53.000Z",
        "permalink": "/web",
        "sidebar": false,
        "article": false,
        "comment": false,
        "editLink": false
      },
      "regularPath": "/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.%E5%89%8D%E7%AB%AF.html",
      "relativePath": "00.目录页/01.前端.md",
      "key": "v-0893c2bd",
      "path": "/web/"
    },
    {
      "title": "页面",
      "frontmatter": {
        "pageComponent": {
          "name": "Catalogue",
          "data": {
            "key": "02.页面",
            "imgUrl": "/img/ui.png",
            "description": "html(5)/css(3)，前端页面相关技术"
          }
        },
        "title": "页面",
        "date": "2020-03-11T21:50:54.000Z",
        "permalink": "/ui",
        "sidebar": false,
        "article": false,
        "comment": false,
        "editLink": false
      },
      "regularPath": "/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.%E9%A1%B5%E9%9D%A2.html",
      "relativePath": "00.目录页/02.页面.md",
      "key": "v-48f64d28",
      "path": "/ui/"
    },
    {
      "title": "技术",
      "frontmatter": {
        "pageComponent": {
          "name": "Catalogue",
          "data": {
            "key": "03.技术",
            "imgUrl": "/img/other.png",
            "description": "技术文档、教程、技巧、总结等文章"
          }
        },
        "title": "技术",
        "date": "2020-03-11T21:50:55.000Z",
        "permalink": "/technology",
        "sidebar": false,
        "article": false,
        "comment": false,
        "editLink": false
      },
      "regularPath": "/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/03.%E6%8A%80%E6%9C%AF.html",
      "relativePath": "00.目录页/03.技术.md",
      "key": "v-6f7d2b83",
      "path": "/technology/"
    },
    {
      "title": "更多",
      "frontmatter": {
        "pageComponent": {
          "name": "Catalogue",
          "data": {
            "key": "04.更多",
            "imgUrl": "/img/more.png",
            "description": "学习、面试、在线工具等更多文章和页面"
          }
        },
        "title": "更多",
        "date": "2020-03-11T21:50:56.000Z",
        "permalink": "/more",
        "sidebar": false,
        "article": false,
        "comment": false,
        "editLink": false
      },
      "regularPath": "/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/04.%E6%9B%B4%E5%A4%9A.html",
      "relativePath": "00.目录页/04.更多.md",
      "key": "v-4d85ecef",
      "path": "/more/"
    },
    {
      "title": "new命令原理",
      "frontmatter": {
        "title": "new命令原理",
        "date": "2019-12-25T14:27:01.000Z",
        "permalink": "/pages/8143cc480faf9a11",
        "categories": [
          "前端",
          "JavaScript文章"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/01.%E5%89%8D%E7%AB%AF/25.JavaScript%E6%96%87%E7%AB%A0/02.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86.html",
      "relativePath": "01.前端/25.JavaScript文章/02.new命令原理.md",
      "key": "v-76a14b9e",
      "path": "/pages/8143cc480faf9a11/",
      "excerpt": "<h1 id=\"new-命令原理\"><a class=\"header-anchor\" href=\"#new-命令原理\">#</a> new 命令原理</h1>\n<p>使用 new 命令时，它后面的函数依次执行下面的步骤：</p>\n<ol>\n<li>创建一个空对象，作为将要返回的实例对象。</li>\n<li>将这个空对象的原型，指向构造函数的 prototype 属性。</li>\n<li>将这个空对象赋值给函数内部的 this 关键字。</li>\n<li>开始执行构造函数内部的代码。</li>\n<li>如果构造函数内有返回值且为对象类型，则返回该对象，否则返回上面创建的实例对象。</li>\n</ol>\n"
    },
    {
      "title": "Vue项目开发前的一些准备工作",
      "frontmatter": {
        "title": "Vue项目开发前的一些准备工作",
        "date": "2020-02-21T14:40:19.000Z",
        "permalink": "/pages/802a1ca6f7b71c59",
        "categories": [
          "前端",
          "Vue文章"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/01.%E5%89%8D%E7%AB%AF/30.Vue%E6%96%87%E7%AB%A0/10.Vue%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%89%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.html",
      "relativePath": "01.前端/30.Vue文章/10.Vue项目开发前的一些准备工作.md",
      "key": "v-41113799",
      "path": "/pages/802a1ca6f7b71c59/",
      "headers": [
        {
          "level": 2,
          "title": "修改",
          "slug": "meta-修改"
        },
        {
          "level": 2,
          "title": "重置样式表",
          "slug": "重置样式表"
        },
        {
          "level": 2,
          "title": "解决移动端点击 300ms 延迟",
          "slug": "解决移动端点击-300ms-延迟"
        }
      ],
      "excerpt": "<h1 id=\"vue-项目开发前的一些准备工作\"><a class=\"header-anchor\" href=\"#vue-项目开发前的一些准备工作\">#</a> Vue 项目开发前的一些准备工作</h1>\n<p>在使用 Vue CLi 创建一个项目之后，正式进入开发前可能需要做一些工作，比如引入重置样式表、解决移动端点击 300ms 延迟等等。</p>\n"
    },
    {
      "title": "《JavaScript教程》笔记",
      "frontmatter": {
        "pageComponent": {
          "name": "Catalogue",
          "data": {
            "key": "《JavaScript教程》笔记",
            "imgUrl": "https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200112120340.png",
            "description": "本章内容为博主在原教程基础上添加学习笔记，教程版权归原作者所有。来源：<a href='https://wangdoc.com/javascript/' target='_blank'>JavaScript教程</a>"
          }
        },
        "title": "《JavaScript教程》笔记",
        "date": "2020-01-12T11:51:53.000Z",
        "permalink": "/note/javascript",
        "article": false,
        "comment": false,
        "editLink": false
      },
      "regularPath": "/01.%E5%89%8D%E7%AB%AF/40.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/00.%E3%80%8AJavaScript%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0.html",
      "relativePath": "01.前端/40.学习笔记/00.《JavaScript教程》笔记.md",
      "key": "v-c7b8faae",
      "path": "/note/javascript/"
    },
    {
      "title": "《ES6 教程》笔记",
      "frontmatter": {
        "pageComponent": {
          "name": "Catalogue",
          "data": {
            "key": "《ES6 教程》笔记",
            "imgUrl": "https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200112160453.png",
            "description": "本章内容为博主在原教程基础上添加学习笔记，教程版权归原作者所有。来源：<a href='https://es6.ruanyifeng.com/' target='_blank'>ES6教程</a>"
          }
        },
        "title": "《ES6 教程》笔记",
        "date": "2020-01-12T15:49:22.000Z",
        "permalink": "/note/es6",
        "article": false,
        "comment": false,
        "editLink": false
      },
      "regularPath": "/01.%E5%89%8D%E7%AB%AF/40.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0.html",
      "relativePath": "01.前端/40.学习笔记/10.《ES6 教程》笔记.md",
      "key": "v-4f9d37a8",
      "path": "/note/es6/"
    },
    {
      "title": "《Vue》笔记",
      "frontmatter": {
        "pageComponent": {
          "name": "Catalogue",
          "data": {
            "key": "《Vue》笔记",
            "imgUrl": "https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200204143633.png",
            "description": "本章内容是博主的Vue学习笔记，以官方文档为准。"
          }
        },
        "title": "《Vue》笔记",
        "date": "2020-02-04T12:16:12.000Z",
        "permalink": "/note/vue",
        "article": false,
        "comment": false,
        "editLink": false
      },
      "regularPath": "/01.%E5%89%8D%E7%AB%AF/40.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0.html",
      "relativePath": "01.前端/40.学习笔记/20.《Vue》笔记.md",
      "key": "v-f898771a",
      "path": "/note/vue/"
    },
    {
      "title": "《TypeScript 从零实现 axios》",
      "frontmatter": {
        "pageComponent": {
          "name": "Catalogue",
          "data": {
            "key": "《TypeScript 从零实现 axios》",
            "imgUrl": "https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200105104632.png",
            "description": "学习使用 TypeScript 从零实现 axios 库"
          }
        },
        "title": "《TypeScript 从零实现 axios》",
        "date": "2020-01-05T10:40:48.000Z",
        "permalink": "/note/typescript-axios",
        "article": false,
        "comment": false,
        "editLink": false
      },
      "regularPath": "/01.%E5%89%8D%E7%AB%AF/40.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/30.%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B.html",
      "relativePath": "01.前端/40.学习笔记/30.《TypeScript 从零实现 axios》.md",
      "key": "v-75fa119e",
      "path": "/note/typescript-axios/"
    },
    {
      "title": "混入(Mixins)",
      "frontmatter": {
        "title": "混入(Mixins)",
        "date": "2020-02-23T15:47:03.000Z",
        "permalink": "/pages/9f15c1a281d8bedb",
        "categories": [
          "页面",
          "stylus"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/02.%E9%A1%B5%E9%9D%A2/25.stylus/10.%E6%B7%B7%E5%85%A5(Mixins).html",
      "relativePath": "02.页面/25.stylus/10.混入(Mixins).md",
      "key": "v-110683c6",
      "path": "/pages/9f15c1a281d8bedb/",
      "headers": [
        {
          "level": 2,
          "title": "混入(Mixins)",
          "slug": "混入-mixins"
        }
      ],
      "excerpt": "<h1 id=\"stylus-混入-mixins\"><a class=\"header-anchor\" href=\"#stylus-混入-mixins\">#</a> stylus 混入(Mixins)</h1>\n<h2 id=\"混入-mixins\"><a class=\"header-anchor\" href=\"#混入-mixins\">#</a> 混入(Mixins)</h2>\n<p>混入和函数定义方法一致，但是应用却大相径庭。</p>\n<p>一个简单的混入应用，定义一个超出显示省略号的<code>ellipsis()</code>方法，在需要用到的地方只需插入这个方法，其样式会扩展并复制到选择器中。</p>\n"
    },
    {
      "title": "CSS教程和技巧收藏",
      "frontmatter": {
        "title": "CSS教程和技巧收藏",
        "date": "2020-08-11T17:13:52.000Z",
        "permalink": "/pages/c8f128/",
        "categories": [
          "页面",
          "CSS"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/02.%E9%A1%B5%E9%9D%A2/20.CSS/00.CSS%E6%95%99%E7%A8%8B%E5%92%8C%E6%8A%80%E5%B7%A7%E6%94%B6%E8%97%8F.html",
      "relativePath": "02.页面/20.CSS/00.CSS教程和技巧收藏.md",
      "key": "v-38432e58",
      "path": "/pages/c8f128/",
      "headers": [
        {
          "level": 2,
          "title": "Flex 布局教程：语法篇",
          "slug": "flex-布局教程：语法篇"
        },
        {
          "level": 2,
          "title": "CSS Grid 网格布局教程",
          "slug": "css-grid-网格布局教程"
        },
        {
          "level": 2,
          "title": "只要一行代码，实现五种 CSS 经典布局",
          "slug": "只要一行代码，实现五种-css-经典布局"
        }
      ]
    },
    {
      "title": "npm常用命令",
      "frontmatter": {
        "title": "npm常用命令",
        "date": "2019-12-25T14:27:01.000Z",
        "permalink": "/pages/61f2f95fd7da14fd",
        "categories": [
          "技术",
          "技术文档"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/03.npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",
      "relativePath": "03.技术/01.技术文档/03.npm常用命令.md",
      "key": "v-66efaf30",
      "path": "/pages/61f2f95fd7da14fd/",
      "headers": [
        {
          "level": 2,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 2,
          "title": "常用命令",
          "slug": "常用命令"
        },
        {
          "level": 2,
          "title": "使用技巧",
          "slug": "使用技巧"
        },
        {
          "level": 2,
          "title": "npm 发布包教程",
          "slug": "npm-发布包教程"
        },
        {
          "level": 2,
          "title": "nrm 的作用与使用",
          "slug": "nrm-的作用与使用"
        }
      ],
      "excerpt": "<h1 id=\"npm-常用命令\"><a class=\"header-anchor\" href=\"#npm-常用命令\">#</a> npm 常用命令</h1>\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>npm 是跟随 node 一起安装的包（模块）管理器。常见的使用场景有以下几种：</p>\n<ul>\n<li>允许用户从 npm 服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从 npm 服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到 npm 服务器供别人使用。</li>\n</ul>\n"
    },
    {
      "title": "yaml语言教程",
      "frontmatter": {
        "title": "yaml语言教程",
        "date": "2019-12-25T14:27:01.000Z",
        "permalink": "/pages/4e8444e2d534d14f",
        "categories": [
          "技术",
          "技术文档"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/15.yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B.html",
      "relativePath": "03.技术/01.技术文档/15.yaml语言教程.md",
      "key": "v-2f3681cf",
      "path": "/pages/4e8444e2d534d14f/",
      "headers": [
        {
          "level": 2,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 2,
          "title": "基本语法",
          "slug": "基本语法"
        },
        {
          "level": 2,
          "title": "数据类型",
          "slug": "数据类型"
        },
        {
          "level": 2,
          "title": "YAML 对象",
          "slug": "yaml-对象"
        },
        {
          "level": 2,
          "title": "YAML 数组",
          "slug": "yaml-数组"
        },
        {
          "level": 2,
          "title": "复合结构（对象和数组组合）",
          "slug": "复合结构（对象和数组组合）"
        },
        {
          "level": 2,
          "title": "纯量",
          "slug": "纯量"
        },
        {
          "level": 2,
          "title": "转换数据格式",
          "slug": "转换数据格式"
        },
        {
          "level": 2,
          "title": "锚点引用",
          "slug": "锚点引用"
        }
      ],
      "excerpt": "<h1 id=\"yaml-语言教程\"><a class=\"header-anchor\" href=\"#yaml-语言教程\">#</a> yaml 语言教程</h1>\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>YAML 是 &quot;YAML Ain't a Markup Language&quot;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&quot;Yet Another Markup Language&quot;（仍是一种标记语言）。</p>\n"
    },
    {
      "title": "费曼学习法",
      "frontmatter": {
        "title": "费曼学习法",
        "date": "2020-07-16T10:04:14.000Z",
        "permalink": "/pages/f2a556/",
        "categories": [
          "更多",
          "学习"
        ],
        "tags": [
          "学习方法"
        ]
      },
      "regularPath": "/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/00.%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95.html",
      "relativePath": "04.更多/01.学习/00.费曼学习法.md",
      "key": "v-6909d842",
      "path": "/pages/f2a556/",
      "headers": [
        {
          "level": 3,
          "title": "步骤",
          "slug": "步骤"
        }
      ]
    },
    {
      "title": "友情链接",
      "frontmatter": {
        "title": "友情链接",
        "date": "2019-12-25T14:27:01.000Z",
        "permalink": "/friends",
        "article": false,
        "sidebar": false
      },
      "regularPath": "/04.%E6%9B%B4%E5%A4%9A/99.%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5.html",
      "relativePath": "04.更多/99.友情链接.md",
      "key": "v-f8751d96",
      "path": "/friends/",
      "headers": [
        {
          "level": 3,
          "title": "友链申请",
          "slug": "友链申请"
        }
      ]
    },
    {
      "title": "关于",
      "frontmatter": {
        "title": "关于",
        "date": "2019-12-25T14:27:01.000Z",
        "permalink": "/about",
        "sidebar": false,
        "article": false
      },
      "regularPath": "/05.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E.html",
      "relativePath": "05.关于/01.关于.md",
      "key": "v-00be4e9f",
      "path": "/about/",
      "headers": [
        {
          "level": 3,
          "title": "📚Blog",
          "slug": "📚blog"
        },
        {
          "level": 3,
          "title": "🎨Theme",
          "slug": "🎨theme"
        },
        {
          "level": 3,
          "title": "🐼Me",
          "slug": "🐼me"
        },
        {
          "level": 2,
          "title": "✉️ 联系",
          "slug": "联系"
        }
      ]
    },
    {
      "title": "分类",
      "frontmatter": {
        "categoriesPage": true,
        "title": "分类",
        "permalink": "/categories/",
        "article": false
      },
      "regularPath": "/@pages/categoriesPage.html",
      "relativePath": "@pages/categoriesPage.md",
      "key": "v-5832b13b",
      "path": "/categories/"
    },
    {
      "title": "标签",
      "frontmatter": {
        "tagsPage": true,
        "title": "标签",
        "permalink": "/tags/",
        "article": false
      },
      "regularPath": "/@pages/tagsPage.html",
      "relativePath": "@pages/tagsPage.md",
      "key": "v-70e06c5b",
      "path": "/tags/"
    },
    {
      "title": "Home",
      "frontmatter": {
        "home": true,
        "heroText": "i-lumi 博客",
        "tagline": "悄悄地拔尖，然后惊艳所有人，致敬每个爱学习的你。",
        "features": [
          {
            "title": "前端",
            "details": "JavaScript、ES6、Vue框架等前端技术",
            "link": "/web/",
            "imgUrl": "/img/web.png"
          },
          {
            "title": "页面",
            "details": "html(5)/css(3)，前端页面相关技术",
            "link": "/ui/",
            "imgUrl": "/img/ui.png"
          },
          {
            "title": "技术",
            "details": "技术文档、教程、技巧、总结等文章",
            "link": "/technology/",
            "imgUrl": "/img/other.png"
          }
        ]
      },
      "regularPath": "/",
      "relativePath": "index.md",
      "key": "v-c65a5118",
      "path": "/"
    },
    {
      "title": "归档",
      "frontmatter": {
        "archivesPage": true,
        "title": "归档",
        "permalink": "/archives/",
        "article": false
      },
      "regularPath": "/@pages/archivesPage.html",
      "relativePath": "@pages/archivesPage.md",
      "key": "v-b2655e4a",
      "path": "/archives/"
    },
    {
      "title": "函数式编程",
      "frontmatter": {
        "title": "函数式编程",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/1cf50330655efc69",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/31.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html",
      "relativePath": "《ES6 教程》笔记/31.函数式编程.md",
      "key": "v-18b2a0b8",
      "path": "/pages/1cf50330655efc69/",
      "headers": [
        {
          "level": 2,
          "title": "柯里化",
          "slug": "柯里化"
        },
        {
          "level": 2,
          "title": "函数合成",
          "slug": "函数合成"
        },
        {
          "level": 2,
          "title": "参数倒置",
          "slug": "参数倒置"
        },
        {
          "level": 2,
          "title": "执行边界",
          "slug": "执行边界"
        },
        {
          "level": 2,
          "title": "队列操作",
          "slug": "队列操作"
        },
        {
          "level": 2,
          "title": "合并操作",
          "slug": "合并操作"
        },
        {
          "level": 2,
          "title": "配对操作",
          "slug": "配对操作"
        },
        {
          "level": 2,
          "title": "参考链接",
          "slug": "参考链接"
        }
      ],
      "excerpt": "<h1 id=\"函数式编程\"><a class=\"header-anchor\" href=\"#函数式编程\">#</a> 函数式编程</h1>\n<p>JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。</p>\n"
    },
    {
      "title": "Mixin",
      "frontmatter": {
        "title": "Mixin",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/6a8e2dc558da1b39",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/32.Mixin.html",
      "relativePath": "《ES6 教程》笔记/32.Mixin.md",
      "key": "v-d347dee0",
      "path": "/pages/6a8e2dc558da1b39/",
      "headers": [
        {
          "level": 2,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 2,
          "title": "Trait",
          "slug": "trait"
        }
      ],
      "excerpt": "<h1 id=\"mixin\"><a class=\"header-anchor\" href=\"#mixin\">#</a> Mixin</h1>\n<p>JavaScript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继承的层次结构是树状的，而不是复杂的<a href=\"https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem\" target=\"_blank\" rel=\"noopener noreferrer\">网状结构<OutboundLink/></a>。</p>\n"
    },
    {
      "title": "简介",
      "frontmatter": {
        "title": "简介",
        "date": "2020-01-05T10:15:07.000Z",
        "permalink": "/pages/e05dce83e5129785",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "初识 TypeScript"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/01.%E5%88%9D%E8%AF%86%20TypeScript/01.%E7%AE%80%E4%BB%8B.html",
      "relativePath": "《TypeScript 从零实现 axios》/01.初识 TypeScript/01.简介.md",
      "key": "v-fd3b918c",
      "path": "/pages/e05dce83e5129785/",
      "headers": [
        {
          "level": 2,
          "title": "TypeScript 的特点",
          "slug": "typescript-的特点"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ]
    },
    {
      "title": "安装 TypeScript",
      "frontmatter": {
        "title": "安装 TypeScript",
        "date": "2020-01-05T10:15:07.000Z",
        "permalink": "/pages/064e0f7b6b6142c8",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "初识 TypeScript"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/01.%E5%88%9D%E8%AF%86%20TypeScript/02.%E5%AE%89%E8%A3%85%20TypeScript.html",
      "relativePath": "《TypeScript 从零实现 axios》/01.初识 TypeScript/02.安装 TypeScript.md",
      "key": "v-580045d8",
      "path": "/pages/064e0f7b6b6142c8/"
    },
    {
      "title": "编写第一个 TypeScript 程序",
      "frontmatter": {
        "title": "编写第一个 TypeScript 程序",
        "date": "2020-01-05T10:15:07.000Z",
        "permalink": "/pages/c85249f40e7a3517",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "初识 TypeScript"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/01.%E5%88%9D%E8%AF%86%20TypeScript/03.%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%20TypeScript%20%E7%A8%8B%E5%BA%8F.html",
      "relativePath": "《TypeScript 从零实现 axios》/01.初识 TypeScript/03.编写第一个 TypeScript 程序.md",
      "key": "v-687e40b0",
      "path": "/pages/c85249f40e7a3517/",
      "headers": [
        {
          "level": 2,
          "title": "编译代码",
          "slug": "编译代码"
        },
        {
          "level": 2,
          "title": "类型注解",
          "slug": "类型注解"
        },
        {
          "level": 2,
          "title": "接口",
          "slug": "接口"
        },
        {
          "level": 2,
          "title": "类",
          "slug": "类"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ]
    },
    {
      "title": "类型推断",
      "frontmatter": {
        "title": "类型推断",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/7279420c899c505d",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/07.%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD.html",
      "relativePath": "《TypeScript 从零实现 axios》/02.TypeScript 常用语法/07.类型推断.md",
      "key": "v-9df54882",
      "path": "/pages/7279420c899c505d/",
      "headers": [
        {
          "level": 2,
          "title": "基础",
          "slug": "基础"
        },
        {
          "level": 2,
          "title": "最佳通用类型",
          "slug": "最佳通用类型"
        },
        {
          "level": 2,
          "title": "上下文类型",
          "slug": "上下文类型"
        }
      ]
    },
    {
      "title": "需求分析",
      "frontmatter": {
        "title": "需求分析",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/195af93fcc871b8b",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 项目初始化"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/03.ts-axios%20%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/01.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.html",
      "relativePath": "《TypeScript 从零实现 axios》/03.ts-axios 项目初始化/01.需求分析.md",
      "key": "v-2b0b0df9",
      "path": "/pages/195af93fcc871b8b/",
      "headers": [
        {
          "level": 2,
          "title": "Features",
          "slug": "features"
        }
      ]
    },
    {
      "title": "初始化项目",
      "frontmatter": {
        "title": "初始化项目",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/6e11ac76475a2b3e",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 项目初始化"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/03.ts-axios%20%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/02.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE.html",
      "relativePath": "《TypeScript 从零实现 axios》/03.ts-axios 项目初始化/02.初始化项目.md",
      "key": "v-a4d10108",
      "path": "/pages/6e11ac76475a2b3e/",
      "headers": [
        {
          "level": 2,
          "title": "创建代码仓库",
          "slug": "创建代码仓库"
        },
        {
          "level": 2,
          "title": "TypeScript library starter",
          "slug": "typescript-library-starter"
        },
        {
          "level": 3,
          "title": "使用方式",
          "slug": "使用方式"
        },
        {
          "level": 3,
          "title": "目录文件介绍",
          "slug": "目录文件介绍"
        },
        {
          "level": 3,
          "title": "优秀工具集成",
          "slug": "优秀工具集成"
        },
        {
          "level": 3,
          "title": "Npm Scripts",
          "slug": "npm-scripts"
        },
        {
          "level": 2,
          "title": "关联远程分支",
          "slug": "关联远程分支"
        },
        {
          "level": 3,
          "title": "拉取代码",
          "slug": "拉取代码"
        },
        {
          "level": 3,
          "title": "提交代码",
          "slug": "提交代码"
        }
      ]
    },
    {
      "title": "处理请求 url 参数",
      "frontmatter": {
        "title": "处理请求 url 参数",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/1313dae575f6dddf",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%20url%20%E5%8F%82%E6%95%B0.html",
      "relativePath": "《TypeScript 从零实现 axios》/04.ts-axios 基础功能实现/01.处理请求 url 参数.md",
      "key": "v-d9a78344",
      "path": "/pages/1313dae575f6dddf/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 3,
          "title": "参数值为数组",
          "slug": "参数值为数组"
        },
        {
          "level": 3,
          "title": "参数值为对象",
          "slug": "参数值为对象"
        },
        {
          "level": 3,
          "title": "参数值为 Date 类型",
          "slug": "参数值为-date-类型"
        },
        {
          "level": 3,
          "title": "特殊字符支持",
          "slug": "特殊字符支持"
        },
        {
          "level": 3,
          "title": "空值忽略",
          "slug": "空值忽略"
        },
        {
          "level": 3,
          "title": "丢弃 url 中的哈希标记",
          "slug": "丢弃-url-中的哈希标记"
        },
        {
          "level": 3,
          "title": "保留 url 中已存在的参数",
          "slug": "保留-url-中已存在的参数"
        },
        {
          "level": 2,
          "title": "buildURL 函数实现",
          "slug": "buildurl-函数实现"
        },
        {
          "level": 2,
          "title": "实现 url 参数处理逻辑",
          "slug": "实现-url-参数处理逻辑"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "处理请求 body 数据",
      "frontmatter": {
        "title": "处理请求 body 数据",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/887cd0918e2543d8",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%20body%20%E6%95%B0%E6%8D%AE.html",
      "relativePath": "《TypeScript 从零实现 axios》/04.ts-axios 基础功能实现/02.处理请求 body 数据.md",
      "key": "v-bc0ba942",
      "path": "/pages/887cd0918e2543d8/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "transformRequest 函数实现",
          "slug": "transformrequest-函数实现"
        },
        {
          "level": 2,
          "title": "实现请求 body 处理逻辑",
          "slug": "实现请求-body-处理逻辑"
        },
        {
          "level": 2,
          "title": "编写 demo",
          "slug": "编写-demo"
        }
      ]
    },
    {
      "title": "处理请求 header",
      "frontmatter": {
        "title": "处理请求 header",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/35c0ec1bb0b0faaf",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%20header.html",
      "relativePath": "《TypeScript 从零实现 axios》/04.ts-axios 基础功能实现/03.处理请求 header.md",
      "key": "v-7b2e683a",
      "path": "/pages/35c0ec1bb0b0faaf/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "processHeaders 函数实现",
          "slug": "processheaders-函数实现"
        },
        {
          "level": 2,
          "title": "实现请求 header 处理逻辑",
          "slug": "实现请求-header-处理逻辑"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "获取响应数据",
      "frontmatter": {
        "title": "获取响应数据",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/a57debe141e1e4f4",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE.html",
      "relativePath": "《TypeScript 从零实现 axios》/04.ts-axios 基础功能实现/04.获取响应数据.md",
      "key": "v-0be80d91",
      "path": "/pages/a57debe141e1e4f4/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "定义接口类型",
          "slug": "定义接口类型"
        },
        {
          "level": 2,
          "title": "实现获取响应数据逻辑",
          "slug": "实现获取响应数据逻辑"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "处理响应 header",
      "frontmatter": {
        "title": "处理响应 header",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/927161662ca32c24",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%20header.html",
      "relativePath": "《TypeScript 从零实现 axios》/04.ts-axios 基础功能实现/05.处理响应 header.md",
      "key": "v-e3b7c6a2",
      "path": "/pages/927161662ca32c24/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "parseHeaders 函数实现及应用",
          "slug": "parseheaders-函数实现及应用"
        }
      ]
    },
    {
      "title": "处理响应 data",
      "frontmatter": {
        "title": "处理响应 data",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/922cb4268499dc3f",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%20data.html",
      "relativePath": "《TypeScript 从零实现 axios》/04.ts-axios 基础功能实现/06.处理响应 data.md",
      "key": "v-4056b16f",
      "path": "/pages/922cb4268499dc3f/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "transformResponse 函数实现及应用",
          "slug": "transformresponse-函数实现及应用"
        }
      ]
    },
    {
      "title": "错误处理",
      "frontmatter": {
        "title": "错误处理",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/6a8bef7b98dfdcf9",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 异常情况处理"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/05.ts-axios%20%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/01.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html",
      "relativePath": "《TypeScript 从零实现 axios》/05.ts-axios 异常情况处理/01.错误处理.md",
      "key": "v-1ac8987d",
      "path": "/pages/6a8bef7b98dfdcf9/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "处理网络异常错误",
          "slug": "处理网络异常错误"
        },
        {
          "level": 2,
          "title": "处理超时错误",
          "slug": "处理超时错误"
        },
        {
          "level": 2,
          "title": "处理非 200 状态码",
          "slug": "处理非-200-状态码"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "错误信息增强",
      "frontmatter": {
        "title": "错误信息增强",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/22d581d8c2860b8a",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 异常情况处理"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/05.ts-axios%20%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/02.%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E5%A2%9E%E5%BC%BA.html",
      "relativePath": "《TypeScript 从零实现 axios》/05.ts-axios 异常情况处理/02.错误信息增强.md",
      "key": "v-7890e11c",
      "path": "/pages/22d581d8c2860b8a/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "创建 AxiosError 类",
          "slug": "创建-axioserror-类"
        },
        {
          "level": 2,
          "title": "createError 方法应用",
          "slug": "createerror-方法应用"
        },
        {
          "level": 2,
          "title": "导出类型定义",
          "slug": "导出类型定义"
        }
      ]
    },
    {
      "title": "axios 函数重载",
      "frontmatter": {
        "title": "axios 函数重载",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/8af227eae851ec97",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 接口扩展"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/06.ts-axios%20%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/02.axios%20%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.html",
      "relativePath": "《TypeScript 从零实现 axios》/06.ts-axios 接口扩展/02.axios 函数重载.md",
      "key": "v-41f16f99",
      "path": "/pages/8af227eae851ec97/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "重载实现",
          "slug": "重载实现"
        },
        {
          "level": 2,
          "title": "编写 demo",
          "slug": "编写-demo"
        }
      ]
    },
    {
      "title": "响应数据支持泛型",
      "frontmatter": {
        "title": "响应数据支持泛型",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/c4489d0bab02cc0c",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 接口扩展"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/06.ts-axios%20%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/03.%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E6%94%AF%E6%8C%81%E6%B3%9B%E5%9E%8B.html",
      "relativePath": "《TypeScript 从零实现 axios》/06.ts-axios 接口扩展/03.响应数据支持泛型.md",
      "key": "v-7c4b1a52",
      "path": "/pages/c4489d0bab02cc0c/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "接口添加泛型参数",
          "slug": "接口添加泛型参数"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "请求和响应配置化",
      "frontmatter": {
        "title": "请求和响应配置化",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/f5b627bfebba87fc",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 配置化实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/08.ts-axios%20%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/02.%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E9%85%8D%E7%BD%AE%E5%8C%96.html",
      "relativePath": "《TypeScript 从零实现 axios》/08.ts-axios 配置化实现/02.请求和响应配置化.md",
      "key": "v-eb9c399a",
      "path": "/pages/f5b627bfebba87fc/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "修改默认配置",
          "slug": "修改默认配置"
        },
        {
          "level": 2,
          "title": "transform 逻辑重构",
          "slug": "transform-逻辑重构"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "扩展 create 静态接口",
      "frontmatter": {
        "title": "扩展 create 静态接口",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/7b49658c26f613bf",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 配置化实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/08.ts-axios%20%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/03.%E6%89%A9%E5%B1%95%20create%20%E9%9D%99%E6%80%81%E6%8E%A5%E5%8F%A3.html",
      "relativePath": "《TypeScript 从零实现 axios》/08.ts-axios 配置化实现/03.扩展 create 静态接口.md",
      "key": "v-ba06aa88",
      "path": "/pages/7b49658c26f613bf/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "静态方法扩展",
          "slug": "静态方法扩展"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "withCredentials",
      "frontmatter": {
        "title": "withCredentials",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/5dce43eba796a2ab",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.withCredentials.html",
      "relativePath": "《TypeScript 从零实现 axios》/10.ts-axios 更多功能实现/01.withCredentials.md",
      "key": "v-adef13b8",
      "path": "/pages/5dce43eba796a2ab/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "XSRF 防御",
      "frontmatter": {
        "title": "XSRF 防御",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/390cb70e2b619449",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.XSRF%20%E9%98%B2%E5%BE%A1.html",
      "relativePath": "《TypeScript 从零实现 axios》/10.ts-axios 更多功能实现/02.XSRF 防御.md",
      "key": "v-9f575b10",
      "path": "/pages/390cb70e2b619449/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "HTTP 授权",
      "frontmatter": {
        "title": "HTTP 授权",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/89cd6496c23159ae",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.HTTP%20%E6%8E%88%E6%9D%83.html",
      "relativePath": "《TypeScript 从零实现 axios》/10.ts-axios 更多功能实现/04.HTTP 授权.md",
      "key": "v-1ec29002",
      "path": "/pages/89cd6496c23159ae/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "自定义合法状态码",
      "frontmatter": {
        "title": "自定义合法状态码",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/40b41ce8e8159567",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E6%B3%95%E7%8A%B6%E6%80%81%E7%A0%81.html",
      "relativePath": "《TypeScript 从零实现 axios》/10.ts-axios 更多功能实现/05.自定义合法状态码.md",
      "key": "v-3f6890c7",
      "path": "/pages/40b41ce8e8159567/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "自定义参数序列化",
      "frontmatter": {
        "title": "自定义参数序列化",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/7753b8141663e54a",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%BA%8F%E5%88%97%E5%8C%96.html",
      "relativePath": "《TypeScript 从零实现 axios》/10.ts-axios 更多功能实现/06.自定义参数序列化.md",
      "key": "v-849b022c",
      "path": "/pages/7753b8141663e54a/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "baseURL",
      "frontmatter": {
        "title": "baseURL",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/0b9f2ee2b4dbb728",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/07.baseURL.html",
      "relativePath": "《TypeScript 从零实现 axios》/10.ts-axios 更多功能实现/07.baseURL.md",
      "key": "v-2c4a96e4",
      "path": "/pages/0b9f2ee2b4dbb728/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "静态方法扩展",
      "frontmatter": {
        "title": "静态方法扩展",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/c26b053540a7dafa",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/08.%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95.html",
      "relativePath": "《TypeScript 从零实现 axios》/10.ts-axios 更多功能实现/08.静态方法扩展.md",
      "key": "v-53d7c6c9",
      "path": "/pages/c26b053540a7dafa/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "前言",
      "frontmatter": {
        "title": "前言",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/df36888424843793",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/01.%E5%89%8D%E8%A8%80.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/01.前言.md",
      "key": "v-62573106",
      "path": "/pages/df36888424843793/"
    },
    {
      "title": "Jest 安装和配置",
      "frontmatter": {
        "title": "Jest 安装和配置",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/bf5c625a35757b37",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/02.Jest%20%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/02.Jest 安装和配置.md",
      "key": "v-51c503e7",
      "path": "/pages/bf5c625a35757b37/",
      "headers": [
        {
          "level": 2,
          "title": "Jest 安装",
          "slug": "jest-安装"
        },
        {
          "level": 2,
          "title": "Jest 配置",
          "slug": "jest-配置"
        }
      ]
    },
    {
      "title": "headers 模块单元测试",
      "frontmatter": {
        "title": "headers 模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/ddd86ec39b5dfe33",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/05.headers%20%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/05.headers 模块单元测试.md",
      "key": "v-68b2a6ec",
      "path": "/pages/ddd86ec39b5dfe33/",
      "headers": [
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "Axios 实例模块单元测试",
      "frontmatter": {
        "title": "Axios 实例模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/2eac7a0a0d644c15",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/06.Axios%20%E5%AE%9E%E4%BE%8B%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/06.Axios 实例模块单元测试.md",
      "key": "v-265990c3",
      "path": "/pages/2eac7a0a0d644c15/",
      "headers": [
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "拦截器模块单元测试",
      "frontmatter": {
        "title": "拦截器模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/97de6fd6293a2c6e",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/07.%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/07.拦截器模块单元测试.md",
      "key": "v-2cba67d0",
      "path": "/pages/97de6fd6293a2c6e/",
      "headers": [
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "mergeConfig 模块单元测试",
      "frontmatter": {
        "title": "mergeConfig 模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/cdf59840306f9e81",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/08.mergeConfig%20%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/08.mergeConfig 模块单元测试.md",
      "key": "v-718e8ecc",
      "path": "/pages/cdf59840306f9e81/",
      "headers": [
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "请求取消模块单元测试",
      "frontmatter": {
        "title": "请求取消模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/6fa16aee29527032",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/09.%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/09.请求取消模块单元测试.md",
      "key": "v-1b1057f7",
      "path": "/pages/6fa16aee29527032/",
      "headers": [
        {
          "level": 2,
          "title": "Cancel 类单元测试",
          "slug": "cancel-类单元测试"
        },
        {
          "level": 2,
          "title": "CancelToken 类单元测试",
          "slug": "canceltoken-类单元测试"
        },
        {
          "level": 2,
          "title": "Cancel 业务逻辑单元测试",
          "slug": "cancel-业务逻辑单元测试"
        }
      ]
    },
    {
      "title": "引用 ts-axios 库",
      "frontmatter": {
        "title": "引用 ts-axios 库",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/c6bdbd5bd60adf5a",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 部署与发布"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/12.ts-axios%20%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/02.%E5%BC%95%E7%94%A8%20ts-axios%20%E5%BA%93.html",
      "relativePath": "《TypeScript 从零实现 axios》/12.ts-axios 部署与发布/02.引用 ts-axios 库.md",
      "key": "v-57d1aebd",
      "path": "/pages/c6bdbd5bd60adf5a/",
      "headers": [
        {
          "level": 2,
          "title": "在 TS 项目中引用",
          "slug": "在-ts-项目中引用"
        },
        {
          "level": 2,
          "title": "在 JS 项目中引用",
          "slug": "在-js-项目中引用"
        }
      ]
    },
    {
      "title": "MVVM模式",
      "frontmatter": {
        "title": "MVVM模式",
        "date": "2020-02-04T12:19:00.000Z",
        "permalink": "/pages/114158caa9e96df0",
        "categories": [
          "《Vue》笔记",
          "基础"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "i-lumi",
          "link": "https://github.com/i-lumi"
        }
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/00.MVVM%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "《Vue》笔记/01.基础/00.MVVM模式.md",
      "key": "v-0bbbca0c",
      "path": "/pages/114158caa9e96df0/",
      "excerpt": "<div class=\"custom-block tip\"><p class=\"custom-block-title\">提示</p>\n<p>说明：本章内容是博主的 Vue 学习笔记，以<a href=\"https://cn.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档<OutboundLink/></a>为准。</p>\n</div>\n<h1 id=\"mvvm-模式\"><a class=\"header-anchor\" href=\"#mvvm-模式\">#</a> MVVM 模式</h1>\n<p>MVVM 模式，<code>M</code>即 model，数据模型；<code>V</code>即 view，视图；<code>VM</code>即 view-model，视图模型。</p>\n"
    },
    {
      "title": "使用组件的细节点",
      "frontmatter": {
        "title": "使用组件的细节点",
        "date": "2020-02-13T13:26:20.000Z",
        "permalink": "/pages/83a1ab785e7fd70c",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/36.%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82%E7%82%B9.html",
      "relativePath": "《Vue》笔记/02.组件/36.使用组件的细节点.md",
      "key": "v-52a01adb",
      "path": "/pages/83a1ab785e7fd70c/",
      "headers": [
        {
          "level": 2,
          "title": "解析 DOM 模板时的注意事项",
          "slug": "解析-dom-模板时的注意事项"
        },
        {
          "level": 2,
          "title": "子组件内的 data 要使用函数返回",
          "slug": "子组件内的-data-要使用函数返回"
        },
        {
          "level": 2,
          "title": "通过 ref 引用操作 DOM",
          "slug": "通过-ref-引用操作-dom"
        }
      ]
    },
    {
      "title": "transition过渡&动画",
      "frontmatter": {
        "title": "transition过渡&动画",
        "date": "2020-02-04T13:16:19.000Z",
        "permalink": "/pages/184a96b493a97078",
        "categories": [
          "《Vue》笔记",
          "过渡&动画"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1&%E5%8A%A8%E7%94%BB/110.transition%E8%BF%87%E6%B8%A1&%E5%8A%A8%E7%94%BB.html",
      "relativePath": "《Vue》笔记/03.过渡&动画/110.transition过渡&动画.md",
      "key": "v-4f2a0961",
      "path": "/pages/184a96b493a97078/",
      "headers": [
        {
          "level": 2,
          "title": "使用",
          "slug": "使用"
        },
        {
          "level": 2,
          "title": "过渡的类名",
          "slug": "过渡的类名"
        },
        {
          "level": 2,
          "title": "css 过渡 demo",
          "slug": "css-过渡-demo"
        },
        {
          "level": 2,
          "title": "css 动画 demo",
          "slug": "css-动画-demo"
        },
        {
          "level": 3,
          "title": "组件中使用的示例",
          "slug": "组件中使用的示例"
        }
      ],
      "excerpt": "<h1 id=\"transition-过渡-动画\"><a class=\"header-anchor\" href=\"#transition-过渡-动画\">#</a> transition 过渡&amp;动画</h1>\n<p><a href=\"https://cn.vuejs.org/v2/guide/transitions.html\" target=\"_blank\" rel=\"noopener noreferrer\">API<OutboundLink/></a></p>\n<h2 id=\"使用\"><a class=\"header-anchor\" href=\"#使用\">#</a> 使用</h2>\n<p>需要设置动画的元素或组件要在外边包裹一个<code>&lt;transition&gt;</code>标签，设置自定义的<code>name</code>，vue 会根据元素的切换（进入/离开）过程添加相应的 css 类名，你可以<strong>自由地使用 css 类名来设置 css 过渡&amp;动画</strong>。</p>\n"
    },
    {
      "title": "Mixin混入",
      "frontmatter": {
        "title": "Mixin混入",
        "date": "2020-02-19T15:22:41.000Z",
        "permalink": "/pages/bd36a3c1bc3e0821",
        "categories": [
          "《Vue》笔记",
          "可复用性&组合"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/04.%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7&%E7%BB%84%E5%90%88/01.Mixin%E6%B7%B7%E5%85%A5.html",
      "relativePath": "《Vue》笔记/04.可复用性&组合/01.Mixin混入.md",
      "key": "v-81757e6c",
      "path": "/pages/bd36a3c1bc3e0821/",
      "headers": [
        {
          "level": 2,
          "title": "基础",
          "slug": "基础"
        },
        {
          "level": 2,
          "title": "选项合并",
          "slug": "选项合并"
        },
        {
          "level": 2,
          "title": "某项目中使用的 Mixin 示例",
          "slug": "某项目中使用的-mixin-示例"
        }
      ],
      "excerpt": "<h1 id=\"mixin-混入\"><a class=\"header-anchor\" href=\"#mixin-混入\">#</a> Mixin 混入</h1>\n<h2 id=\"基础\"><a class=\"header-anchor\" href=\"#基础\">#</a> 基础</h2>\n<p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>\n"
    },
    {
      "title": "Vue CLi v3 创建项目使用记录",
      "frontmatter": {
        "title": "Vue CLi v3 创建项目使用记录",
        "date": "2020-02-20T17:24:29.000Z",
        "permalink": "/pages/d00311f8174119b2",
        "categories": [
          "《Vue》笔记",
          "工具"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/05.%E5%B7%A5%E5%85%B7/10.Vue%20CLi%20v3%20%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html",
      "relativePath": "《Vue》笔记/05.工具/10.Vue CLi v3 创建项目使用记录.md",
      "key": "v-1a51667a",
      "path": "/pages/d00311f8174119b2/",
      "headers": [
        {
          "level": 2,
          "title": "vue create",
          "slug": "vue-create"
        },
        {
          "level": 2,
          "title": "图形化界面",
          "slug": "图形化界面"
        }
      ]
    },
    {
      "title": "vuex操作相关",
      "frontmatter": {
        "title": "vuex操作相关",
        "date": "2020-02-04T13:15:19.000Z",
        "permalink": "/pages/d9d62d6ab8ff99a6",
        "categories": [
          "《Vue》笔记",
          "规模化"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/100.vuex%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3.html",
      "relativePath": "《Vue》笔记/06.规模化/100.vuex操作相关.md",
      "key": "v-7a9bb83f",
      "path": "/pages/d9d62d6ab8ff99a6/"
    },
    {
      "title": "路由懒加载",
      "frontmatter": {
        "title": "路由懒加载",
        "date": "2020-02-04T13:20:20.000Z",
        "permalink": "/pages/38ecac9a9b92f037",
        "categories": [
          "《Vue》笔记",
          "规模化"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/140.%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD.html",
      "relativePath": "《Vue》笔记/06.规模化/140.路由懒加载.md",
      "key": "v-4497095a",
      "path": "/pages/38ecac9a9b92f037/"
    },
    {
      "title": "Vue中的防抖函数封装和使用",
      "frontmatter": {
        "title": "Vue中的防抖函数封装和使用",
        "date": "2020-02-04T13:10:19.000Z",
        "permalink": "/pages/fb08e252dfd8fdfd",
        "categories": [
          "《Vue》笔记",
          "其他"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/80.Vue%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html",
      "relativePath": "《Vue》笔记/99.其他/80.Vue中的防抖函数封装和使用.md",
      "key": "v-85472b70",
      "path": "/pages/fb08e252dfd8fdfd/",
      "headers": [
        {
          "level": 3,
          "title": "相关文章",
          "slug": "相关文章"
        }
      ]
    },
    {
      "title": "操作本地缓存",
      "frontmatter": {
        "title": "操作本地缓存",
        "date": "2020-02-04T13:14:19.000Z",
        "permalink": "/pages/30a94dbe96873b33",
        "categories": [
          "《Vue》笔记",
          "其他"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/90.%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98.html",
      "relativePath": "《Vue》笔记/99.其他/90.操作本地缓存.md",
      "key": "v-1e9642f8",
      "path": "/pages/30a94dbe96873b33/"
    },
    {
      "title": "常用meta整理",
      "frontmatter": {
        "title": "常用meta整理",
        "date": "2020-02-21T12:20:10.000Z",
        "permalink": "/pages/8309a5b876fc95e3",
        "categories": [
          "页面",
          "HTML"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/02.%E9%A1%B5%E9%9D%A2/10.HTML/10.%E5%B8%B8%E7%94%A8meta%E6%95%B4%E7%90%86.html",
      "relativePath": "02.页面/10.HTML/10.常用meta整理.md",
      "key": "v-04b01ed2",
      "path": "/pages/8309a5b876fc95e3/",
      "headers": [
        {
          "level": 2,
          "title": "元素",
          "slug": "meta-元素"
        },
        {
          "level": 3,
          "title": "概要",
          "slug": "概要"
        },
        {
          "level": 3,
          "title": "网页相关",
          "slug": "网页相关"
        },
        {
          "level": 3,
          "title": "SEO优化",
          "slug": "seo优化"
        },
        {
          "level": 3,
          "title": "移动设备",
          "slug": "移动设备"
        },
        {
          "level": 3,
          "title": "一个常用的移动端页面meta设置",
          "slug": "一个常用的移动端页面meta设置"
        }
      ],
      "excerpt": "<h1 id=\"常用meta整理\"><a class=\"header-anchor\" href=\"#常用meta整理\">#</a> 常用meta整理</h1>\n<h2 id=\"meta-元素\"><a class=\"header-anchor\" href=\"#meta-元素\">#</a> &lt;meta&gt; 元素</h2>\n<h3 id=\"概要\"><a class=\"header-anchor\" href=\"#概要\">#</a> 概要</h3>\n<p>meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>\n"
    },
    {
      "title": "Git使用手册",
      "frontmatter": {
        "title": "Git使用手册",
        "date": "2019-12-25T14:27:01.000Z",
        "permalink": "/pages/9a7ee40fc232253e",
        "categories": [
          "技术",
          "技术文档"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/01.Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html",
      "relativePath": "03.技术/01.技术文档/01.Git使用手册.md",
      "key": "v-7e516fb9",
      "path": "/pages/9a7ee40fc232253e/",
      "headers": [
        {
          "level": 2,
          "title": "安装",
          "slug": "安装"
        },
        {
          "level": 2,
          "title": "创建版本库（仓库）",
          "slug": "创建版本库（仓库）"
        },
        {
          "level": 2,
          "title": "添加文件到仓库",
          "slug": "添加文件到仓库"
        },
        {
          "level": 2,
          "title": "版本管理",
          "slug": "版本管理"
        },
        {
          "level": 2,
          "title": "远程仓库",
          "slug": "远程仓库"
        },
        {
          "level": 2,
          "title": "分支管理",
          "slug": "分支管理"
        },
        {
          "level": 2,
          "title": "帮助命令",
          "slug": "帮助命令"
        },
        {
          "level": 2,
          "title": "参考文档",
          "slug": "参考文档"
        }
      ],
      "excerpt": "<h1 id=\"git-使用手册\"><a class=\"header-anchor\" href=\"#git-使用手册\">#</a> Git 使用手册</h1>\n<h2 id=\"安装\"><a class=\"header-anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>官网下载：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener noreferrer\">https://git-scm.com/downloads<OutboundLink/></a> 下载完成后使用默认进行安装。</p>\n<p>安装完成后，在开始菜单里找到 <code>Git</code> -&gt; <code>Git Bash</code>，蹦出一个类似命令行窗口的东西，就说明 Git 安装成功！\n还需要最后一步设置，在命令行输入：</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"Your Name\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"email@example.com\"</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>因为 Git 是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和 Email 地址。</p>\n"
    },
    {
      "title": "字符串的新增方法",
      "frontmatter": {
        "title": "字符串的新增方法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/a650b4a0ebfc9350",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/05.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95.html",
      "relativePath": "《ES6 教程》笔记/05.字符串的新增方法.md",
      "key": "v-2a460efc",
      "path": "/pages/a650b4a0ebfc9350/",
      "headers": [
        {
          "level": 2,
          "title": "String.fromCodePoint()",
          "slug": "string-fromcodepoint"
        },
        {
          "level": 2,
          "title": "String.raw()",
          "slug": "string-raw"
        },
        {
          "level": 2,
          "title": "实例方法：codePointAt()",
          "slug": "实例方法：codepointat"
        },
        {
          "level": 2,
          "title": "实例方法：normalize()",
          "slug": "实例方法：normalize"
        },
        {
          "level": 2,
          "title": "实例方法：includes() 包含, startsWith() 头部包含, endsWith() 末尾包含",
          "slug": "实例方法：includes-包含-startswith-头部包含-endswith-末尾包含"
        },
        {
          "level": 2,
          "title": "实例方法：repeat() 重复",
          "slug": "实例方法：repeat-重复"
        },
        {
          "level": 2,
          "title": "实例方法：padStart() 补全头部，padEnd() 补全末尾",
          "slug": "实例方法：padstart-补全头部，padend-补全末尾"
        },
        {
          "level": 2,
          "title": "实例方法：trimStart() 修剪头部，trimEnd() 修剪末尾",
          "slug": "实例方法：trimstart-修剪头部，trimend-修剪末尾"
        },
        {
          "level": 2,
          "title": "实例方法：matchAll()",
          "slug": "实例方法：matchall"
        }
      ],
      "excerpt": "<h1 id=\"字符串的新增方法\"><a class=\"header-anchor\" href=\"#字符串的新增方法\">#</a> 字符串的新增方法</h1>\n<p>本章介绍字符串对象的新增方法。</p>\n<h2 id=\"string-fromcodepoint\"><a class=\"header-anchor\" href=\"#string-fromcodepoint\">#</a> String.fromCodePoint()</h2>\n<p>ES5 提供<code>String.fromCharCode()</code>方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于<code>0xFFFF</code>的字符。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20BB7</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"ஷ\"</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "Reflect",
      "frontmatter": {
        "title": "Reflect",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/74de3e45e4491e95",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/15.Reflect.html",
      "relativePath": "《ES6 教程》笔记/15.Reflect.md",
      "key": "v-4a4ae820",
      "path": "/pages/74de3e45e4491e95/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "静态方法",
          "slug": "静态方法"
        },
        {
          "level": 3,
          "title": "Reflect.get(target, name, receiver)",
          "slug": "reflect-get-target-name-receiver"
        },
        {
          "level": 3,
          "title": "Reflect.set(target, name, value, receiver)",
          "slug": "reflect-set-target-name-value-receiver"
        },
        {
          "level": 3,
          "title": "Reflect.has(obj, name)",
          "slug": "reflect-has-obj-name"
        },
        {
          "level": 3,
          "title": "Reflect.deleteProperty(obj, name)",
          "slug": "reflect-deleteproperty-obj-name"
        },
        {
          "level": 3,
          "title": "Reflect.construct(target, args)",
          "slug": "reflect-construct-target-args"
        },
        {
          "level": 3,
          "title": "Reflect.getPrototypeOf(obj)",
          "slug": "reflect-getprototypeof-obj"
        },
        {
          "level": 3,
          "title": "Reflect.setPrototypeOf(obj, newProto)",
          "slug": "reflect-setprototypeof-obj-newproto"
        },
        {
          "level": 3,
          "title": "Reflect.apply(func, thisArg, args)",
          "slug": "reflect-apply-func-thisarg-args"
        },
        {
          "level": 3,
          "title": "Reflect.defineProperty(target, propertyKey, attributes)",
          "slug": "reflect-defineproperty-target-propertykey-attributes"
        },
        {
          "level": 3,
          "title": "Reflect.getOwnPropertyDescriptor(target, propertyKey)",
          "slug": "reflect-getownpropertydescriptor-target-propertykey"
        },
        {
          "level": 3,
          "title": "Reflect.isExtensible (target)",
          "slug": "reflect-isextensible-target"
        },
        {
          "level": 3,
          "title": "Reflect.preventExtensions(target)",
          "slug": "reflect-preventextensions-target"
        },
        {
          "level": 3,
          "title": "Reflect.ownKeys (target)",
          "slug": "reflect-ownkeys-target"
        },
        {
          "level": 2,
          "title": "实例：使用 Proxy 实现观察者模式",
          "slug": "实例：使用-proxy-实现观察者模式"
        }
      ],
      "excerpt": "<h1 id=\"reflect\"><a class=\"header-anchor\" href=\"#reflect\">#</a> Reflect</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是 ES6 为了操作对象而提供的新 API。<code>Reflect</code>对象的设计目的有这样几个。</p>\n<p>（1） **将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。**现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。也就是说，从<code>Reflect</code>对象上可以拿到语言内部的方法。</p>\n"
    },
    {
      "title": "编程风格",
      "frontmatter": {
        "title": "编程风格",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/984bf549204bb266",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/25.%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.html",
      "relativePath": "《ES6 教程》笔记/25.编程风格.md",
      "key": "v-f78b4c34",
      "path": "/pages/984bf549204bb266/",
      "headers": [
        {
          "level": 2,
          "title": "块级作用域",
          "slug": "块级作用域"
        },
        {
          "level": 2,
          "title": "字符串",
          "slug": "字符串"
        },
        {
          "level": 2,
          "title": "解构赋值",
          "slug": "解构赋值"
        },
        {
          "level": 2,
          "title": "对象",
          "slug": "对象"
        },
        {
          "level": 2,
          "title": "数组",
          "slug": "数组"
        },
        {
          "level": 2,
          "title": "函数",
          "slug": "函数"
        },
        {
          "level": 2,
          "title": "Map 结构",
          "slug": "map-结构"
        },
        {
          "level": 2,
          "title": "Class",
          "slug": "class"
        },
        {
          "level": 2,
          "title": "模块",
          "slug": "模块"
        },
        {
          "level": 2,
          "title": "ESLint 的使用",
          "slug": "eslint-的使用"
        }
      ],
      "excerpt": "<h1 id=\"编程风格\"><a class=\"header-anchor\" href=\"#编程风格\">#</a> 编程风格</h1>\n<p>本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。</p>\n<p>多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"noopener noreferrer\">Airbnb<OutboundLink/></a> 公司的 JavaScript 风格规范。</p>\n"
    },
    {
      "title": "基础类型",
      "frontmatter": {
        "title": "基础类型",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/28672e2743bbc3a7",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/01.%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B.html",
      "relativePath": "《TypeScript 从零实现 axios》/02.TypeScript 常用语法/01.基础类型.md",
      "key": "v-b7491b94",
      "path": "/pages/28672e2743bbc3a7/",
      "headers": [
        {
          "level": 2,
          "title": "布尔值",
          "slug": "布尔值"
        },
        {
          "level": 2,
          "title": "数字",
          "slug": "数字"
        },
        {
          "level": 2,
          "title": "字符串",
          "slug": "字符串"
        },
        {
          "level": 2,
          "title": "数组",
          "slug": "数组"
        },
        {
          "level": 2,
          "title": "元组 Tuple",
          "slug": "元组-tuple"
        },
        {
          "level": 2,
          "title": "枚举",
          "slug": "枚举"
        },
        {
          "level": 2,
          "title": "any",
          "slug": "any"
        },
        {
          "level": 2,
          "title": "void",
          "slug": "void"
        },
        {
          "level": 2,
          "title": "null 和 undefined",
          "slug": "null-和-undefined"
        },
        {
          "level": 2,
          "title": "never",
          "slug": "never"
        },
        {
          "level": 2,
          "title": "object",
          "slug": "object"
        },
        {
          "level": 2,
          "title": "类型断言",
          "slug": "类型断言"
        }
      ]
    },
    {
      "title": "变量声明",
      "frontmatter": {
        "title": "变量声明",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/54add7f5cf78088e",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/02.%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E.html",
      "relativePath": "《TypeScript 从零实现 axios》/02.TypeScript 常用语法/02.变量声明.md",
      "key": "v-4b77bd72",
      "path": "/pages/54add7f5cf78088e/",
      "headers": [
        {
          "level": 2,
          "title": "var 声明",
          "slug": "var-声明"
        },
        {
          "level": 3,
          "title": "作用域规则",
          "slug": "作用域规则"
        },
        {
          "level": 3,
          "title": "捕获变量怪异之处",
          "slug": "捕获变量怪异之处"
        },
        {
          "level": 2,
          "title": "let 声明",
          "slug": "let-声明"
        },
        {
          "level": 3,
          "title": "块作用域",
          "slug": "块作用域"
        },
        {
          "level": 3,
          "title": "重定义及屏蔽",
          "slug": "重定义及屏蔽"
        },
        {
          "level": 3,
          "title": "块级作用域变量的获取",
          "slug": "块级作用域变量的获取"
        },
        {
          "level": 2,
          "title": "const 声明",
          "slug": "const-声明"
        },
        {
          "level": 2,
          "title": "let vs. const",
          "slug": "let-vs-const"
        },
        {
          "level": 2,
          "title": "解构",
          "slug": "解构"
        },
        {
          "level": 3,
          "title": "解构数组",
          "slug": "解构数组"
        },
        {
          "level": 3,
          "title": "对象解构",
          "slug": "对象解构"
        },
        {
          "level": 3,
          "title": "属性重命名",
          "slug": "属性重命名"
        },
        {
          "level": 3,
          "title": "默认值",
          "slug": "默认值"
        },
        {
          "level": 3,
          "title": "函数声明",
          "slug": "函数声明"
        },
        {
          "level": 2,
          "title": "展开",
          "slug": "展开"
        }
      ]
    },
    {
      "title": "函数",
      "frontmatter": {
        "title": "函数",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/870a51ba2a9edfad",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/05.%E5%87%BD%E6%95%B0.html",
      "relativePath": "《TypeScript 从零实现 axios》/02.TypeScript 常用语法/05.函数.md",
      "key": "v-148b4b98",
      "path": "/pages/870a51ba2a9edfad/",
      "headers": [
        {
          "level": 2,
          "title": "基本示例",
          "slug": "基本示例"
        },
        {
          "level": 2,
          "title": "函数类型",
          "slug": "函数类型"
        },
        {
          "level": 3,
          "title": "为函数定义类型",
          "slug": "为函数定义类型"
        },
        {
          "level": 3,
          "title": "书写完整函数类型",
          "slug": "书写完整函数类型"
        },
        {
          "level": 3,
          "title": "推断类型",
          "slug": "推断类型"
        },
        {
          "level": 2,
          "title": "可选参数和默认参数",
          "slug": "可选参数和默认参数"
        },
        {
          "level": 3,
          "title": "剩余参数",
          "slug": "剩余参数"
        },
        {
          "level": 2,
          "title": "this",
          "slug": "this"
        },
        {
          "level": 3,
          "title": "this 和箭头函数",
          "slug": "this-和箭头函数"
        },
        {
          "level": 3,
          "title": "this 参数",
          "slug": "this-参数"
        },
        {
          "level": 3,
          "title": "this 参数在回调函数里",
          "slug": "this-参数在回调函数里"
        },
        {
          "level": 2,
          "title": "重载",
          "slug": "重载"
        }
      ]
    },
    {
      "title": "泛型",
      "frontmatter": {
        "title": "泛型",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/8045759ec4ad3c01",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/06.%E6%B3%9B%E5%9E%8B.html",
      "relativePath": "《TypeScript 从零实现 axios》/02.TypeScript 常用语法/06.泛型.md",
      "key": "v-79fab238",
      "path": "/pages/8045759ec4ad3c01/",
      "headers": [
        {
          "level": 2,
          "title": "基础示例",
          "slug": "基础示例"
        },
        {
          "level": 2,
          "title": "使用泛型变量",
          "slug": "使用泛型变量"
        },
        {
          "level": 2,
          "title": "泛型类型",
          "slug": "泛型类型"
        },
        {
          "level": 2,
          "title": "泛型类",
          "slug": "泛型类"
        },
        {
          "level": 2,
          "title": "泛型约束",
          "slug": "泛型约束"
        },
        {
          "level": 3,
          "title": "在泛型约束中使用类型参数",
          "slug": "在泛型约束中使用类型参数"
        }
      ]
    },
    {
      "title": "高级类型",
      "frontmatter": {
        "title": "高级类型",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/3fb6c2f52ab398e3",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/08.%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html",
      "relativePath": "《TypeScript 从零实现 axios》/02.TypeScript 常用语法/08.高级类型.md",
      "key": "v-00073b5c",
      "path": "/pages/3fb6c2f52ab398e3/",
      "headers": [
        {
          "level": 2,
          "title": "交叉类型",
          "slug": "交叉类型"
        },
        {
          "level": 2,
          "title": "联合类型",
          "slug": "联合类型"
        },
        {
          "level": 2,
          "title": "类型保护",
          "slug": "类型保护"
        },
        {
          "level": 3,
          "title": "用户自定义的类型保护",
          "slug": "用户自定义的类型保护"
        },
        {
          "level": 3,
          "title": "typeof 类型保护",
          "slug": "typeof-类型保护"
        },
        {
          "level": 3,
          "title": "instanceof 类型保护",
          "slug": "instanceof-类型保护"
        },
        {
          "level": 2,
          "title": "可以为 null 的类型",
          "slug": "可以为-null-的类型"
        },
        {
          "level": 3,
          "title": "可选参数和可选属性",
          "slug": "可选参数和可选属性"
        },
        {
          "level": 3,
          "title": "类型保护和类型断言",
          "slug": "类型保护和类型断言"
        },
        {
          "level": 2,
          "title": "字符串字面量类型",
          "slug": "字符串字面量类型"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ]
    },
    {
      "title": "编写基础请求代码",
      "frontmatter": {
        "title": "编写基础请求代码",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/acfe1e0b401fa984",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 项目初始化"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/03.ts-axios%20%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/03.%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81.html",
      "relativePath": "《TypeScript 从零实现 axios》/03.ts-axios 项目初始化/03.编写基础请求代码.md",
      "key": "v-617bb0d7",
      "path": "/pages/acfe1e0b401fa984/",
      "headers": [
        {
          "level": 2,
          "title": "创建入口文件",
          "slug": "创建入口文件"
        },
        {
          "level": 3,
          "title": "编译配置文件 tsconfig.json",
          "slug": "编译配置文件-tsconfig-json"
        },
        {
          "level": 3,
          "title": "定义 AxiosRequestConfig 接口类型",
          "slug": "定义-axiosrequestconfig-接口类型"
        },
        {
          "level": 2,
          "title": "利用 XMLHttpRequest 发送请求",
          "slug": "利用-xmlhttprequest-发送请求"
        },
        {
          "level": 3,
          "title": "引入 xhr 模块",
          "slug": "引入-xhr-模块"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        },
        {
          "level": 3,
          "title": "依赖安装",
          "slug": "依赖安装"
        },
        {
          "level": 3,
          "title": "编写 webpack 配置文件",
          "slug": "编写-webpack-配置文件"
        },
        {
          "level": 3,
          "title": "编写 server 文件",
          "slug": "编写-server-文件"
        },
        {
          "level": 3,
          "title": "编写 demo 代码",
          "slug": "编写-demo-代码"
        },
        {
          "level": 3,
          "title": "运行 demo",
          "slug": "运行-demo"
        }
      ]
    },
    {
      "title": "扩展接口",
      "frontmatter": {
        "title": "扩展接口",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/034e320f4af88bd4",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 接口扩展"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/06.ts-axios%20%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/01.%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3.html",
      "relativePath": "《TypeScript 从零实现 axios》/06.ts-axios 接口扩展/01.扩展接口.md",
      "key": "v-8a964fd0",
      "path": "/pages/034e320f4af88bd4/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "接口类型定义",
          "slug": "接口类型定义"
        },
        {
          "level": 2,
          "title": "创建 Axios 类",
          "slug": "创建-axios-类"
        },
        {
          "level": 2,
          "title": "混合对象实现",
          "slug": "混合对象实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "拦截器设计与实现",
      "frontmatter": {
        "title": "拦截器设计与实现",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/70651900f022f586",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 拦截器实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/07.ts-axios%20%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0/01.%E6%8B%A6%E6%88%AA%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "《TypeScript 从零实现 axios》/07.ts-axios 拦截器实现/01.拦截器设计与实现.md",
      "key": "v-40864989",
      "path": "/pages/70651900f022f586/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "整体设计",
          "slug": "整体设计"
        },
        {
          "level": 2,
          "title": "拦截器管理类实现",
          "slug": "拦截器管理类实现"
        },
        {
          "level": 3,
          "title": "接口定义",
          "slug": "接口定义"
        },
        {
          "level": 3,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "链式调用实现",
          "slug": "链式调用实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "合并配置的设计与实现",
      "frontmatter": {
        "title": "合并配置的设计与实现",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/937e4de6b81edeca",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 配置化实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/08.ts-axios%20%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/01.%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "《TypeScript 从零实现 axios》/08.ts-axios 配置化实现/01.合并配置的设计与实现.md",
      "key": "v-5e68418e",
      "path": "/pages/937e4de6b81edeca/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "默认配置",
          "slug": "默认配置"
        },
        {
          "level": 3,
          "title": "默认配置定义",
          "slug": "默认配置定义"
        },
        {
          "level": 3,
          "title": "添加到 axios 对象中",
          "slug": "添加到-axios-对象中"
        },
        {
          "level": 2,
          "title": "配置合并及策略",
          "slug": "配置合并及策略"
        },
        {
          "level": 3,
          "title": "合并方法",
          "slug": "合并方法"
        },
        {
          "level": 3,
          "title": "默认合并策略",
          "slug": "默认合并策略"
        },
        {
          "level": 3,
          "title": "只接受自定义配置合并策略",
          "slug": "只接受自定义配置合并策略"
        },
        {
          "level": 3,
          "title": "复杂对象合并策略",
          "slug": "复杂对象合并策略"
        },
        {
          "level": 2,
          "title": "flatten headers",
          "slug": "flatten-headers"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "取消功能的设计与实现",
      "frontmatter": {
        "title": "取消功能的设计与实现",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/fdc6da5372397430",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 取消功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/09.ts-axios%20%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "《TypeScript 从零实现 axios》/09.ts-axios 取消功能实现/01.取消功能的设计与实现.md",
      "key": "v-4f45c36c",
      "path": "/pages/fdc6da5372397430/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "异步分离的设计方案",
          "slug": "异步分离的设计方案"
        },
        {
          "level": 2,
          "title": "CancelToken 类实现",
          "slug": "canceltoken-类实现"
        },
        {
          "level": 3,
          "title": "接口定义",
          "slug": "接口定义"
        },
        {
          "level": 3,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "CancelToken 扩展静态接口",
          "slug": "canceltoken-扩展静态接口"
        },
        {
          "level": 3,
          "title": "接口定义",
          "slug": "接口定义-2"
        },
        {
          "level": 3,
          "title": "代码实现",
          "slug": "代码实现-2"
        },
        {
          "level": 2,
          "title": "Cancel 类实现及 axios 的扩展",
          "slug": "cancel-类实现及-axios-的扩展"
        },
        {
          "level": 3,
          "title": "接口定义",
          "slug": "接口定义-3"
        },
        {
          "level": 3,
          "title": "代码实现",
          "slug": "代码实现-3"
        },
        {
          "level": 2,
          "title": "额外逻辑实现",
          "slug": "额外逻辑实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "上传和下载的进度监控",
      "frontmatter": {
        "title": "上传和下载的进度监控",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/1376fd897809036e",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BF%9B%E5%BA%A6%E7%9B%91%E6%8E%A7.html",
      "relativePath": "《TypeScript 从零实现 axios》/10.ts-axios 更多功能实现/03.上传和下载的进度监控.md",
      "key": "v-5d07ebab",
      "path": "/pages/1376fd897809036e/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "请求模块单元测试",
      "frontmatter": {
        "title": "请求模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/e1d15dec8634e6b5",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/04.%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/04.请求模块单元测试.md",
      "key": "v-4e88c91d",
      "path": "/pages/e1d15dec8634e6b5/",
      "headers": [
        {
          "level": 2,
          "title": "jasmine-ajax",
          "slug": "jasmine-ajax"
        },
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "剩余模块单元测试",
      "frontmatter": {
        "title": "剩余模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/9572134781ba6a25",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/10.%E5%89%A9%E4%BD%99%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/10.剩余模块单元测试.md",
      "key": "v-e2df7e7e",
      "path": "/pages/9572134781ba6a25/",
      "headers": [
        {
          "level": 2,
          "title": "defaults 模块单元测试",
          "slug": "defaults-模块单元测试"
        },
        {
          "level": 2,
          "title": "transform 模块单元测试",
          "slug": "transform-模块单元测试"
        },
        {
          "level": 2,
          "title": "xsrf 模块单元测试",
          "slug": "xsrf-模块单元测试"
        },
        {
          "level": 2,
          "title": "上传下载模块单元测试",
          "slug": "上传下载模块单元测试"
        },
        {
          "level": 2,
          "title": "HTTP 授权模块单元测试",
          "slug": "http-授权模块单元测试"
        },
        {
          "level": 2,
          "title": "静态方法模块单元测试",
          "slug": "静态方法模块单元测试"
        },
        {
          "level": 2,
          "title": "补充未覆盖的代码测试",
          "slug": "补充未覆盖的代码测试"
        }
      ]
    },
    {
      "title": "ts-axios 编译与发布",
      "frontmatter": {
        "title": "ts-axios 编译与发布",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/3e5d5a45ad50f198",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 部署与发布"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/12.ts-axios%20%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/01.ts-axios%20%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%91%E5%B8%83.html",
      "relativePath": "《TypeScript 从零实现 axios》/12.ts-axios 部署与发布/01.ts-axios 编译与发布.md",
      "key": "v-41bbe330",
      "path": "/pages/3e5d5a45ad50f198/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "编译和打包",
          "slug": "编译和打包"
        },
        {
          "level": 3,
          "title": "修改 rollup.config.ts",
          "slug": "修改-rollup-config-ts"
        },
        {
          "level": 3,
          "title": "修改 package.json",
          "slug": "修改-package-json"
        },
        {
          "level": 2,
          "title": "自动化部署",
          "slug": "自动化部署"
        },
        {
          "level": 3,
          "title": "修改 package.json",
          "slug": "修改-package-json-2"
        },
        {
          "level": 3,
          "title": "编写部署脚本",
          "slug": "编写部署脚本"
        },
        {
          "level": 2,
          "title": "运行部署脚本",
          "slug": "运行部署脚本"
        }
      ]
    },
    {
      "title": "《JavaScript高级程序设计》笔记",
      "frontmatter": {
        "title": "《JavaScript高级程序设计》笔记",
        "date": "2020-06-12T12:39:01.000Z",
        "permalink": "/note/js/",
        "categories": [
          "笔记"
        ],
        "tags": [
          "笔记",
          "红宝书"
        ]
      },
      "regularPath": "/01.%E5%89%8D%E7%AB%AF/40.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.%E3%80%8AJavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%AC%94%E8%AE%B0.html",
      "relativePath": "01.前端/40.学习笔记/05.《JavaScript高级程序设计》笔记.md",
      "key": "v-1e947073",
      "path": "/note/js/",
      "headers": [
        {
          "level": 2,
          "title": "第 1 章 JavaScript 简介",
          "slug": "第-1-章-javascript-简介"
        },
        {
          "level": 2,
          "title": "第 2 章 在 HTML 中使用 JavaScript",
          "slug": "第-2-章-在-html-中使用-javascript"
        },
        {
          "level": 2,
          "title": "第 3 章 基本概念",
          "slug": "第-3-章-基本概念"
        },
        {
          "level": 2,
          "title": "第 4 章 变量、作用域和内存问题",
          "slug": "第-4-章-变量、作用域和内存问题"
        },
        {
          "level": 2,
          "title": "第 5 章 引用类型",
          "slug": "第-5-章-引用类型"
        },
        {
          "level": 3,
          "title": "Array 类型",
          "slug": "array-类型"
        },
        {
          "level": 2,
          "title": "第 6 章 面向对象的程序设计",
          "slug": "第-6-章-面向对象的程序设计"
        },
        {
          "level": 3,
          "title": "6.1 理解对象",
          "slug": "_6-1-理解对象"
        },
        {
          "level": 3,
          "title": "6.2 创建对象",
          "slug": "_6-2-创建对象"
        },
        {
          "level": 2,
          "title": "第 7 章 函数表达式",
          "slug": "第-7-章-函数表达式"
        },
        {
          "level": 2,
          "title": "第 8 章 BOM",
          "slug": "第-8-章-bom"
        },
        {
          "level": 2,
          "title": "第 9 章 客户端检测",
          "slug": "第-9-章-客户端检测"
        },
        {
          "level": 2,
          "title": "第 10 章 DOM",
          "slug": "第-10-章-dom"
        },
        {
          "level": 2,
          "title": "第 11 章 DOM 扩展",
          "slug": "第-11-章-dom-扩展"
        },
        {
          "level": 2,
          "title": "第 12 章 DOM2 和 DOM3",
          "slug": "第-12-章-dom2-和-dom3"
        },
        {
          "level": 2,
          "title": "第 13 章 事件",
          "slug": "第-13-章-事件"
        },
        {
          "level": 2,
          "title": "第 14 章 表单脚本",
          "slug": "第-14-章-表单脚本"
        },
        {
          "level": 2,
          "title": "第 15 章 使用 Canvas 绘图",
          "slug": "第-15-章-使用-canvas-绘图"
        },
        {
          "level": 2,
          "title": "第 16 章 HTML5 脚本编程",
          "slug": "第-16-章-html5-脚本编程"
        },
        {
          "level": 2,
          "title": "第 17 章 错误处理与调试",
          "slug": "第-17-章-错误处理与调试"
        },
        {
          "level": 2,
          "title": "第 18 章 JavaScript 与 XML",
          "slug": "第-18-章-javascript-与-xml"
        },
        {
          "level": 2,
          "title": "第 19 章 E4X",
          "slug": "第-19-章-e4x"
        },
        {
          "level": 2,
          "title": "第 20 章 JSON",
          "slug": "第-20-章-json"
        },
        {
          "level": 2,
          "title": "第 21 章 Ajax 与 Comet",
          "slug": "第-21-章-ajax-与-comet"
        },
        {
          "level": 2,
          "title": "第 22 章 高级技巧",
          "slug": "第-22-章-高级技巧"
        },
        {
          "level": 2,
          "title": "第 23 章 离线应用与客户端存储",
          "slug": "第-23-章-离线应用与客户端存储"
        },
        {
          "level": 2,
          "title": "第 24 章 最佳实践",
          "slug": "第-24-章-最佳实践"
        },
        {
          "level": 2,
          "title": "第 25 章 新兴的 API",
          "slug": "第-25-章-新兴的-api"
        }
      ]
    },
    {
      "title": "Markdown使用教程",
      "frontmatter": {
        "title": "Markdown使用教程",
        "date": "2019-12-25T14:27:01.000Z",
        "permalink": "/pages/ad247c4332211551",
        "categories": [
          "技术",
          "技术文档"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/02.Markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html",
      "relativePath": "03.技术/01.技术文档/02.Markdown使用教程.md",
      "key": "v-000f7dab",
      "path": "/pages/ad247c4332211551/",
      "headers": [
        {
          "level": 2,
          "title": "一、Markdown",
          "slug": "一、markdown"
        },
        {
          "level": 3,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "应用",
          "slug": "应用"
        },
        {
          "level": 3,
          "title": "编辑器",
          "slug": "编辑器"
        },
        {
          "level": 2,
          "title": "二、徽章",
          "slug": "二、徽章"
        },
        {
          "level": 2,
          "title": "三、设置目录",
          "slug": "三、设置目录"
        },
        {
          "level": 2,
          "title": "四、标题",
          "slug": "四、标题"
        },
        {
          "level": 2,
          "title": "二级标题",
          "slug": "二级标题"
        },
        {
          "level": 3,
          "title": "三级标题",
          "slug": "三级标题"
        },
        {
          "level": 2,
          "title": "五、文本",
          "slug": "五、文本"
        },
        {
          "level": 3,
          "title": "段落",
          "slug": "段落"
        },
        {
          "level": 3,
          "title": "字体",
          "slug": "字体"
        },
        {
          "level": 3,
          "title": "删除线",
          "slug": "删除线"
        },
        {
          "level": 3,
          "title": "下划线",
          "slug": "下划线"
        },
        {
          "level": 3,
          "title": "文字高亮",
          "slug": "文字高亮"
        },
        {
          "level": 3,
          "title": "分隔线",
          "slug": "分隔线"
        },
        {
          "level": 3,
          "title": "脚注",
          "slug": "脚注"
        },
        {
          "level": 2,
          "title": "六、列表",
          "slug": "六、列表"
        },
        {
          "level": 3,
          "title": "无序列表",
          "slug": "无序列表"
        },
        {
          "level": 3,
          "title": "有序列表",
          "slug": "有序列表"
        },
        {
          "level": 3,
          "title": "折叠列表",
          "slug": "折叠列表"
        },
        {
          "level": 3,
          "title": "带复选框列表",
          "slug": "带复选框列表"
        },
        {
          "level": 3,
          "title": "列表嵌套",
          "slug": "列表嵌套"
        },
        {
          "level": 2,
          "title": "七、区块引用",
          "slug": "七、区块引用"
        },
        {
          "level": 2,
          "title": "八、代码",
          "slug": "八、代码"
        },
        {
          "level": 3,
          "title": "代码区块",
          "slug": "代码区块"
        },
        {
          "level": 2,
          "title": "九、链接",
          "slug": "九、链接"
        },
        {
          "level": 3,
          "title": "变量链接",
          "slug": "变量链接"
        },
        {
          "level": 3,
          "title": "Github仓库中使用内部链接",
          "slug": "github仓库中使用内部链接"
        },
        {
          "level": 3,
          "title": "锚点链接",
          "slug": "锚点链接"
        },
        {
          "level": 2,
          "title": "十、图片",
          "slug": "十、图片"
        },
        {
          "level": 3,
          "title": "图片宽高",
          "slug": "图片宽高"
        },
        {
          "level": 3,
          "title": "相对路径以及Github中使用图片",
          "slug": "相对路径以及github中使用图片"
        },
        {
          "level": 2,
          "title": "十一、表格",
          "slug": "十一、表格"
        },
        {
          "level": 2,
          "title": "十二、Emoji表情包",
          "slug": "十二、emoji表情包"
        },
        {
          "level": 2,
          "title": "十三、其他技巧",
          "slug": "十三、其他技巧"
        },
        {
          "level": 3,
          "title": "支持的 HTML 元素",
          "slug": "支持的-html-元素"
        },
        {
          "level": 3,
          "title": "转义",
          "slug": "转义"
        },
        {
          "level": 3,
          "title": "数学公式",
          "slug": "数学公式"
        },
        {
          "level": 3,
          "title": "图表",
          "slug": "图表"
        },
        {
          "level": 3,
          "title": "流程图",
          "slug": "流程图"
        },
        {
          "level": 3,
          "title": "时序图",
          "slug": "时序图"
        },
        {
          "level": 3,
          "title": "甘特图",
          "slug": "甘特图"
        }
      ],
      "excerpt": "<h1 id=\"markdown使用教程\"><a class=\"header-anchor\" href=\"#markdown使用教程\">#</a> Markdown使用教程</h1>\n<h2 id=\"一、markdown\"><a class=\"header-anchor\" href=\"#一、markdown\">#</a> 一、Markdown</h2>\n<h3 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\">#</a> 简介</h3>\n<p><img src=\"https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png\" alt=\"logo\"></p>\n<p><code>Markdown</code> 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>\n"
    },
    {
      "title": "npm packageJson属性详解",
      "frontmatter": {
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        },
        "title": "npm packageJson属性详解",
        "date": "2020-04-08T17:16:38.000Z",
        "permalink": "/pages/dec4f3f00e71a312",
        "categories": [
          "技术",
          "技术文档"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/10.npm%20packageJson%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3.html",
      "relativePath": "03.技术/01.技术文档/10.npm packageJson属性详解.md",
      "key": "v-472c5970",
      "path": "/pages/dec4f3f00e71a312/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "name",
          "slug": "name"
        },
        {
          "level": 2,
          "title": "version",
          "slug": "version"
        },
        {
          "level": 2,
          "title": "description",
          "slug": "description"
        },
        {
          "level": 2,
          "title": "keywords",
          "slug": "keywords"
        },
        {
          "level": 2,
          "title": "homepage",
          "slug": "homepage"
        },
        {
          "level": 2,
          "title": "bugs",
          "slug": "bugs"
        },
        {
          "level": 2,
          "title": "license",
          "slug": "license"
        },
        {
          "level": 2,
          "title": "和用户相关的属性: author, contributors",
          "slug": "和用户相关的属性-author-contributors"
        },
        {
          "level": 2,
          "title": "files",
          "slug": "files"
        },
        {
          "level": 2,
          "title": "main",
          "slug": "main"
        },
        {
          "level": 2,
          "title": "bin",
          "slug": "bin"
        },
        {
          "level": 2,
          "title": "man",
          "slug": "man"
        },
        {
          "level": 2,
          "title": "directories",
          "slug": "directories"
        },
        {
          "level": 3,
          "title": "directories.lib",
          "slug": "directories-lib"
        },
        {
          "level": 3,
          "title": "directories.bin",
          "slug": "directories-bin"
        },
        {
          "level": 3,
          "title": "directories.man",
          "slug": "directories-man"
        },
        {
          "level": 3,
          "title": "directories.doc",
          "slug": "directories-doc"
        },
        {
          "level": 3,
          "title": "directories.example",
          "slug": "directories-example"
        },
        {
          "level": 2,
          "title": "repository",
          "slug": "repository"
        },
        {
          "level": 2,
          "title": "scripts",
          "slug": "scripts"
        },
        {
          "level": 2,
          "title": "config",
          "slug": "config"
        },
        {
          "level": 2,
          "title": "dependencies",
          "slug": "dependencies"
        },
        {
          "level": 2,
          "title": "URLs as Dependencies",
          "slug": "urls-as-dependencies"
        },
        {
          "level": 2,
          "title": "Git URLs as Dependencies",
          "slug": "git-urls-as-dependencies"
        },
        {
          "level": 2,
          "title": "GitHub URLs",
          "slug": "github-urls"
        },
        {
          "level": 2,
          "title": "Local Paths",
          "slug": "local-paths"
        },
        {
          "level": 2,
          "title": "devDependencies",
          "slug": "devdependencies"
        },
        {
          "level": 2,
          "title": "peerDependencies",
          "slug": "peerdependencies"
        },
        {
          "level": 2,
          "title": "bundledDependencies",
          "slug": "bundleddependencies"
        },
        {
          "level": 2,
          "title": "optionalDependencies",
          "slug": "optionaldependencies"
        },
        {
          "level": 2,
          "title": "engines",
          "slug": "engines"
        },
        {
          "level": 2,
          "title": "engineStrict",
          "slug": "enginestrict"
        },
        {
          "level": 2,
          "title": "os",
          "slug": "os"
        },
        {
          "level": 2,
          "title": "cpu",
          "slug": "cpu"
        },
        {
          "level": 2,
          "title": "preferGlobal",
          "slug": "preferglobal"
        },
        {
          "level": 2,
          "title": "private",
          "slug": "private"
        },
        {
          "level": 2,
          "title": "publishConfig",
          "slug": "publishconfig"
        },
        {
          "level": 2,
          "title": "DEFAULT VALUES",
          "slug": "default-values"
        },
        {
          "level": 2,
          "title": "参考文档列表(https://docs.npmjs.com/)",
          "slug": "参考文档列表-https-docs-npmjs-com"
        }
      ],
      "excerpt": "<h1 id=\"npm-package-json-属性详解\"><a class=\"header-anchor\" href=\"#npm-package-json-属性详解\">#</a> npm package.json 属性详解</h1>\n<blockquote>\n<p>本文转自<a href=\"https://www.cnblogs.com/tzyy/p/5193811.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/tzyy/p/5193811.html<OutboundLink/></a>，作者：TZYY</p>\n</blockquote>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p><code>package.json</code>必须是一个严格的 json 文件，而不仅仅是 js 里边的一个对象。其中很多属性可以通过<code>npm-config</code>来生成</p>\n"
    },
    {
      "title": "变量的解构赋值",
      "frontmatter": {
        "title": "变量的解构赋值",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/b1ab10a62f7564da",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/03.%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html",
      "relativePath": "《ES6 教程》笔记/03.变量的解构赋值.md",
      "key": "v-568199e5",
      "path": "/pages/b1ab10a62f7564da/",
      "headers": [
        {
          "level": 2,
          "title": "数组的解构赋值",
          "slug": "数组的解构赋值"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "默认值",
          "slug": "默认值"
        },
        {
          "level": 2,
          "title": "对象的解构赋值",
          "slug": "对象的解构赋值"
        },
        {
          "level": 3,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "默认值",
          "slug": "默认值-2"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        },
        {
          "level": 2,
          "title": "字符串的解构赋值",
          "slug": "字符串的解构赋值"
        },
        {
          "level": 2,
          "title": "数值和布尔值的解构赋值",
          "slug": "数值和布尔值的解构赋值"
        },
        {
          "level": 2,
          "title": "函数参数的解构赋值",
          "slug": "函数参数的解构赋值"
        },
        {
          "level": 2,
          "title": "圆括号问题",
          "slug": "圆括号问题"
        },
        {
          "level": 3,
          "title": "不能使用圆括号的情况",
          "slug": "不能使用圆括号的情况"
        },
        {
          "level": 3,
          "title": "可以使用圆括号的情况",
          "slug": "可以使用圆括号的情况"
        },
        {
          "level": 2,
          "title": "用途",
          "slug": "用途"
        }
      ],
      "excerpt": "<h1 id=\"变量的解构赋值\"><a class=\"header-anchor\" href=\"#变量的解构赋值\">#</a> 变量的解构赋值</h1>\n<h2 id=\"数组的解构赋值\"><a class=\"header-anchor\" href=\"#数组的解构赋值\">#</a> 数组的解构赋值</h2>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>ES6 允许按照一定模式，<strong>从数组和对象中提取值，对变量进行赋值，这被称为解构</strong>（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "ECMAScript 6 简介",
      "frontmatter": {
        "title": "ECMAScript 6 简介",
        "date": "2020-01-12T15:45:35.000Z",
        "permalink": "/pages/f344d070a1031ef7",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/01.ECMAScript%206%20%E7%AE%80%E4%BB%8B.html",
      "relativePath": "《ES6 教程》笔记/01.ECMAScript 6 简介.md",
      "key": "v-cc0e753c",
      "path": "/pages/f344d070a1031ef7/",
      "headers": [
        {
          "level": 2,
          "title": "ECMAScript 和 JavaScript 的关系",
          "slug": "ecmascript-和-javascript-的关系"
        },
        {
          "level": 2,
          "title": "ES6 与 ECMAScript 2015 的关系",
          "slug": "es6-与-ecmascript-2015-的关系"
        },
        {
          "level": 2,
          "title": "语法提案的批准流程",
          "slug": "语法提案的批准流程"
        },
        {
          "level": 2,
          "title": "ECMAScript 的历史",
          "slug": "ecmascript-的历史"
        },
        {
          "level": 2,
          "title": "部署进度",
          "slug": "部署进度"
        },
        {
          "level": 2,
          "title": "Babel 转码器",
          "slug": "babel-转码器"
        },
        {
          "level": 3,
          "title": "配置文件.babelrc",
          "slug": "配置文件-babelrc"
        },
        {
          "level": 3,
          "title": "命令行转码",
          "slug": "命令行转码"
        },
        {
          "level": 3,
          "title": "babel-node",
          "slug": "babel-node"
        },
        {
          "level": 3,
          "title": "@babel/register 模块",
          "slug": "babel-register-模块"
        },
        {
          "level": 3,
          "title": "babel API",
          "slug": "babel-api"
        },
        {
          "level": 3,
          "title": "@babel/polyfill",
          "slug": "babel-polyfill"
        },
        {
          "level": 3,
          "title": "浏览器环境",
          "slug": "浏览器环境"
        },
        {
          "level": 2,
          "title": "Traceur 转码器",
          "slug": "traceur-转码器"
        },
        {
          "level": 3,
          "title": "直接插入网页",
          "slug": "直接插入网页"
        },
        {
          "level": 3,
          "title": "在线转换",
          "slug": "在线转换"
        },
        {
          "level": 3,
          "title": "命令行转换",
          "slug": "命令行转换"
        },
        {
          "level": 3,
          "title": "Node 环境的用法",
          "slug": "node-环境的用法"
        }
      ],
      "excerpt": "<blockquote>\n<p>说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener noreferrer\">http://es6.ruanyifeng.com/<OutboundLink/></a>，教程版权归原作者所有。</p>\n</blockquote>\n<h1 id=\"ecmascript-6-简介\"><a class=\"header-anchor\" href=\"#ecmascript-6-简介\">#</a> ECMAScript 6 简介</h1>\n<p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>\n"
    },
    {
      "title": "let 和 const 命令",
      "frontmatter": {
        "title": "let 和 const 命令",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/c1edd70a6b7c7872",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/02.let%20%E5%92%8C%20const%20%E5%91%BD%E4%BB%A4.html",
      "relativePath": "《ES6 教程》笔记/02.let 和 const 命令.md",
      "key": "v-774d1ce9",
      "path": "/pages/c1edd70a6b7c7872/",
      "headers": [
        {
          "level": 2,
          "title": "let 命令",
          "slug": "let-命令"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "不存在变量提升",
          "slug": "不存在变量提升"
        },
        {
          "level": 3,
          "title": "暂时性死区",
          "slug": "暂时性死区"
        },
        {
          "level": 3,
          "title": "不允许重复声明",
          "slug": "不允许重复声明"
        },
        {
          "level": 2,
          "title": "块级作用域",
          "slug": "块级作用域"
        },
        {
          "level": 3,
          "title": "为什么需要块级作用域？",
          "slug": "为什么需要块级作用域？"
        },
        {
          "level": 3,
          "title": "ES6 的块级作用域",
          "slug": "es6-的块级作用域"
        },
        {
          "level": 3,
          "title": "块级作用域与函数声明",
          "slug": "块级作用域与函数声明"
        },
        {
          "level": 2,
          "title": "const 命令",
          "slug": "const-命令"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法-2"
        },
        {
          "level": 3,
          "title": "本质",
          "slug": "本质"
        },
        {
          "level": 3,
          "title": "ES6 声明变量的六种方法",
          "slug": "es6-声明变量的六种方法"
        },
        {
          "level": 2,
          "title": "顶层对象的属性",
          "slug": "顶层对象的属性"
        },
        {
          "level": 2,
          "title": "globalThis 对象",
          "slug": "globalthis-对象"
        }
      ],
      "excerpt": "<h1 id=\"let-和-const-命令\"><a class=\"header-anchor\" href=\"#let-和-const-命令\">#</a> let 和 const 命令</h1>\n<h2 id=\"let-命令\"><a class=\"header-anchor\" href=\"#let-命令\">#</a> let 命令</h2>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，<strong>只在<code>let</code>命令所在的代码块内有效(块级作用域)</strong>。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\na <span class=\"token comment\">// ReferenceError: a is not defined.</span>\nb <span class=\"token comment\">// 1</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "字符串的扩展",
      "frontmatter": {
        "title": "字符串的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/ca89eca8adeba5f4",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/04.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "《ES6 教程》笔记/04.字符串的扩展.md",
      "key": "v-dc97ca06",
      "path": "/pages/ca89eca8adeba5f4/",
      "headers": [
        {
          "level": 2,
          "title": "字符的 Unicode 表示法",
          "slug": "字符的-unicode-表示法"
        },
        {
          "level": 2,
          "title": "字符串的遍历器接口",
          "slug": "字符串的遍历器接口"
        },
        {
          "level": 2,
          "title": "直接输入 U+2028 和 U+2029",
          "slug": "直接输入-u-2028-和-u-2029"
        },
        {
          "level": 2,
          "title": "JSON.stringify() 的改造",
          "slug": "json-stringify-的改造"
        },
        {
          "level": 2,
          "title": "模板字符串",
          "slug": "模板字符串"
        },
        {
          "level": 2,
          "title": "实例：模板编译",
          "slug": "实例：模板编译"
        },
        {
          "level": 2,
          "title": "标签模板",
          "slug": "标签模板"
        },
        {
          "level": 2,
          "title": "模板字符串的限制",
          "slug": "模板字符串的限制"
        }
      ],
      "excerpt": "<h1 id=\"字符串的扩展\"><a class=\"header-anchor\" href=\"#字符串的扩展\">#</a> 字符串的扩展</h1>\n<p>本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。</p>\n<h2 id=\"字符的-unicode-表示法\"><a class=\"header-anchor\" href=\"#字符的-unicode-表示法\">#</a> 字符的 Unicode 表示法</h2>\n<p>ES6 加强了对 Unicode 的支持，允许采用<code>\\uxxxx</code>形式表示一个字符，其中<code>xxxx</code>表示字符的 Unicode 码点。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token string\">\"\\u0061\"</span>\n<span class=\"token comment\">// \"a\"</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "正则的扩展",
      "frontmatter": {
        "title": "正则的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/0473261a6ab0ee8c",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/06.%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "《ES6 教程》笔记/06.正则的扩展.md",
      "key": "v-246a65da",
      "path": "/pages/0473261a6ab0ee8c/",
      "headers": [
        {
          "level": 2,
          "title": "RegExp 构造函数",
          "slug": "regexp-构造函数"
        },
        {
          "level": 2,
          "title": "字符串的正则方法",
          "slug": "字符串的正则方法"
        },
        {
          "level": 2,
          "title": "u 修饰符",
          "slug": "u-修饰符"
        },
        {
          "level": 2,
          "title": "RegExp.prototype.unicode 属性",
          "slug": "regexp-prototype-unicode-属性"
        },
        {
          "level": 2,
          "title": "y 修饰符",
          "slug": "y-修饰符"
        },
        {
          "level": 2,
          "title": "RegExp.prototype.sticky 属性",
          "slug": "regexp-prototype-sticky-属性"
        },
        {
          "level": 2,
          "title": "RegExp.prototype.flags 属性",
          "slug": "regexp-prototype-flags-属性"
        },
        {
          "level": 2,
          "title": "s 修饰符：dotAll 模式",
          "slug": "s-修饰符：dotall-模式"
        },
        {
          "level": 2,
          "title": "后行断言",
          "slug": "后行断言"
        },
        {
          "level": 2,
          "title": "Unicode 属性类",
          "slug": "unicode-属性类"
        },
        {
          "level": 2,
          "title": "具名组匹配",
          "slug": "具名组匹配"
        },
        {
          "level": 3,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "解构赋值和替换",
          "slug": "解构赋值和替换"
        },
        {
          "level": 3,
          "title": "引用",
          "slug": "引用"
        },
        {
          "level": 2,
          "title": "String.prototype.matchAll()",
          "slug": "string-prototype-matchall"
        }
      ],
      "excerpt": "<h1 id=\"正则的扩展\"><a class=\"header-anchor\" href=\"#正则的扩展\">#</a> 正则的扩展</h1>\n<h2 id=\"regexp-构造函数\"><a class=\"header-anchor\" href=\"#regexp-构造函数\">#</a> RegExp 构造函数</h2>\n<p>在 ES5 中，<code>RegExp</code>构造函数的参数有两种情况。</p>\n<p>第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/xyz/i</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "对象的新增方法",
      "frontmatter": {
        "title": "对象的新增方法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/e85e68947502cf90",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/11.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95.html",
      "relativePath": "《ES6 教程》笔记/11.对象的新增方法.md",
      "key": "v-0c50e123",
      "path": "/pages/e85e68947502cf90/",
      "headers": [
        {
          "level": 2,
          "title": "Object.is()",
          "slug": "object-is"
        },
        {
          "level": 2,
          "title": "Object.assign()",
          "slug": "object-assign"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        },
        {
          "level": 3,
          "title": "常见用途",
          "slug": "常见用途"
        },
        {
          "level": 2,
          "title": "Object.getOwnPropertyDescriptors()",
          "slug": "object-getownpropertydescriptors"
        },
        {
          "level": 2,
          "title": "__proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()",
          "slug": "proto-属性，object-setprototypeof-，object-getprototypeof"
        },
        {
          "level": 3,
          "title": "__proto__属性",
          "slug": "proto-属性"
        },
        {
          "level": 3,
          "title": "Object.setPrototypeOf()",
          "slug": "object-setprototypeof"
        },
        {
          "level": 3,
          "title": "Object.getPrototypeOf()",
          "slug": "object-getprototypeof"
        },
        {
          "level": 2,
          "title": "Object.keys()，Object.values()，Object.entries()",
          "slug": "object-keys-，object-values-，object-entries"
        },
        {
          "level": 3,
          "title": "Object.keys()",
          "slug": "object-keys"
        },
        {
          "level": 3,
          "title": "Object.values()",
          "slug": "object-values"
        },
        {
          "level": 3,
          "title": "Object.entries()",
          "slug": "object-entries"
        },
        {
          "level": 2,
          "title": "Object.fromEntries()",
          "slug": "object-fromentries"
        }
      ],
      "excerpt": "<h1 id=\"对象的新增方法\"><a class=\"header-anchor\" href=\"#对象的新增方法\">#</a> 对象的新增方法</h1>\n<p>本章介绍 Object 对象的新增方法。</p>\n<h2 id=\"object-is\"><a class=\"header-anchor\" href=\"#object-is\">#</a> Object.is()</h2>\n<p>ES5 比较两个值是否相等，只有两个运算符：相等运算符（<code>==</code>）和严格相等运算符（<code>===</code>）。它们都有缺点，前者会自动转换数据类型，后者的<code>NaN</code>不等于自身，以及<code>+0</code>等于<code>-0</code>。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。</p>\n<p>ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。<code>Object.is</code>就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>\n"
    },
    {
      "title": "Class 的继承",
      "frontmatter": {
        "title": "Class 的继承",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/83f8c3a0cd87dd83",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/22.Class%20%E7%9A%84%E7%BB%A7%E6%89%BF.html",
      "relativePath": "《ES6 教程》笔记/22.Class 的继承.md",
      "key": "v-81e9cf50",
      "path": "/pages/83f8c3a0cd87dd83/",
      "headers": [
        {
          "level": 2,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 2,
          "title": "Object.getPrototypeOf()",
          "slug": "object-getprototypeof"
        },
        {
          "level": 2,
          "title": "super 关键字",
          "slug": "super-关键字"
        },
        {
          "level": 2,
          "title": "类的 prototype 属性和__proto__属性",
          "slug": "类的-prototype-属性和-proto-属性"
        },
        {
          "level": 3,
          "title": "实例的 __proto__ 属性",
          "slug": "实例的-proto-属性"
        },
        {
          "level": 2,
          "title": "原生构造函数的继承",
          "slug": "原生构造函数的继承"
        },
        {
          "level": 2,
          "title": "Mixin 模式的实现",
          "slug": "mixin-模式的实现"
        }
      ],
      "excerpt": "<h1 id=\"class-的继承\"><a class=\"header-anchor\" href=\"#class-的继承\">#</a> Class 的继承</h1>\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>Class 可以通过<code>extends</code>关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorPoint</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "读懂 ECMAScript 规格",
      "frontmatter": {
        "title": "读懂 ECMAScript 规格",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/32c35f7651d6e58e",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/26.%E8%AF%BB%E6%87%82%20ECMAScript%20%E8%A7%84%E6%A0%BC.html",
      "relativePath": "《ES6 教程》笔记/26.读懂 ECMAScript 规格.md",
      "key": "v-2c359dc9",
      "path": "/pages/32c35f7651d6e58e/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "术语",
          "slug": "术语"
        },
        {
          "level": 3,
          "title": "抽象操作",
          "slug": "抽象操作"
        },
        {
          "level": 3,
          "title": "Record 和 field",
          "slug": "record-和-field"
        },
        {
          "level": 3,
          "title": "[[Notation]]",
          "slug": "notation"
        },
        {
          "level": 3,
          "title": "Completion Record",
          "slug": "completion-record"
        },
        {
          "level": 2,
          "title": "抽象操作的标准流程",
          "slug": "抽象操作的标准流程"
        },
        {
          "level": 2,
          "title": "相等运算符",
          "slug": "相等运算符"
        },
        {
          "level": 2,
          "title": "数组的空位",
          "slug": "数组的空位"
        },
        {
          "level": 2,
          "title": "数组的 map 方法",
          "slug": "数组的-map-方法"
        }
      ],
      "excerpt": "<h1 id=\"读懂-ecmascript-规格\"><a class=\"header-anchor\" href=\"#读懂-ecmascript-规格\">#</a> 读懂 ECMAScript 规格</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。</p>\n<p>一般来说，没有必要阅读规格，除非你要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解，而且对于解决实际的应用问题，帮助不大。但是，如果你遇到疑难的语法问题，实在找不到答案，这时可以去查看规格文件，了解语言标准是怎么说的。规格是解决问题的“最后一招”。</p>\n"
    },
    {
      "title": "异步遍历器",
      "frontmatter": {
        "title": "异步遍历器",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/16121351be68691b",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/27.%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8.html",
      "relativePath": "《ES6 教程》笔记/27.异步遍历器.md",
      "key": "v-05ca6063",
      "path": "/pages/16121351be68691b/",
      "headers": [
        {
          "level": 2,
          "title": "同步遍历器的问题",
          "slug": "同步遍历器的问题"
        },
        {
          "level": 2,
          "title": "异步遍历的接口",
          "slug": "异步遍历的接口"
        },
        {
          "level": 2,
          "title": "for await...of",
          "slug": "for-await-of"
        },
        {
          "level": 2,
          "title": "异步 Generator 函数",
          "slug": "异步-generator-函数"
        },
        {
          "level": 2,
          "title": "yield* 语句",
          "slug": "yield-语句"
        }
      ],
      "excerpt": "<h1 id=\"异步遍历器\"><a class=\"header-anchor\" href=\"#异步遍历器\">#</a> 异步遍历器</h1>\n<h2 id=\"同步遍历器的问题\"><a class=\"header-anchor\" href=\"#同步遍历器的问题\">#</a> 同步遍历器的问题</h2>\n<p>《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的<code>next</code>方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息。<code>next</code>方法返回的对象的结构是<code>{value, done}</code>，其中<code>value</code>表示当前的数据的值，<code>done</code>是一个布尔值，表示遍历是否结束。</p>\n"
    },
    {
      "title": "最新提案",
      "frontmatter": {
        "title": "最新提案",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/7188882b8d65af1b",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/29.%E6%9C%80%E6%96%B0%E6%8F%90%E6%A1%88.html",
      "relativePath": "《ES6 教程》笔记/29.最新提案.md",
      "key": "v-2367e3ec",
      "path": "/pages/7188882b8d65af1b/",
      "headers": [
        {
          "level": 2,
          "title": "do 表达式",
          "slug": "do-表达式"
        },
        {
          "level": 2,
          "title": "throw 表达式",
          "slug": "throw-表达式"
        },
        {
          "level": 2,
          "title": "函数的部分执行",
          "slug": "函数的部分执行"
        },
        {
          "level": 3,
          "title": "语法",
          "slug": "语法"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        },
        {
          "level": 2,
          "title": "管道运算符",
          "slug": "管道运算符"
        },
        {
          "level": 2,
          "title": "数值分隔符",
          "slug": "数值分隔符"
        },
        {
          "level": 2,
          "title": "Math.signbit()",
          "slug": "math-signbit"
        },
        {
          "level": 2,
          "title": "双冒号运算符",
          "slug": "双冒号运算符"
        },
        {
          "level": 2,
          "title": "Realm API",
          "slug": "realm-api"
        },
        {
          "level": 2,
          "title": "#!命令",
          "slug": "命令"
        },
        {
          "level": 2,
          "title": "import.meta",
          "slug": "import-meta"
        }
      ],
      "excerpt": "<h1 id=\"最新提案\"><a class=\"header-anchor\" href=\"#最新提案\">#</a> 最新提案</h1>\n<p>本章介绍一些尚未进入标准、但很有希望的最新提案。</p>\n<h2 id=\"do-表达式\"><a class=\"header-anchor\" href=\"#do-表达式\">#</a> do 表达式</h2>\n<p>本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t <span class=\"token operator\">=</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "装饰器",
      "frontmatter": {
        "title": "装饰器",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/e97bc1e5626b082c",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/30.%E8%A3%85%E9%A5%B0%E5%99%A8.html",
      "relativePath": "《ES6 教程》笔记/30.装饰器.md",
      "key": "v-3d47f21e",
      "path": "/pages/e97bc1e5626b082c/",
      "headers": [
        {
          "level": 2,
          "title": "类的装饰",
          "slug": "类的装饰"
        },
        {
          "level": 2,
          "title": "方法的装饰",
          "slug": "方法的装饰"
        },
        {
          "level": 2,
          "title": "为什么装饰器不能用于函数？",
          "slug": "为什么装饰器不能用于函数？"
        },
        {
          "level": 2,
          "title": "core-decorators.js",
          "slug": "core-decorators-js"
        },
        {
          "level": 2,
          "title": "使用装饰器实现自动发布事件",
          "slug": "使用装饰器实现自动发布事件"
        },
        {
          "level": 2,
          "title": "Mixin",
          "slug": "mixin"
        },
        {
          "level": 2,
          "title": "Trait",
          "slug": "trait"
        }
      ],
      "excerpt": "<h1 id=\"装饰器\"><a class=\"header-anchor\" href=\"#装饰器\">#</a> 装饰器</h1>\n<p>[说明] Decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完全重写。</p>\n<p>装饰器（Decorator）是一种与类（class）相关的语法，用来注释或修改类和类方法。许多面向对象的语言都有这项功能，目前有一个<a href=\"https://github.com/tc39/proposal-decorators\" target=\"_blank\" rel=\"noopener noreferrer\">提案<OutboundLink/></a>将其引入了 ECMAScript。</p>\n"
    },
    {
      "title": "基础",
      "frontmatter": {
        "title": "基础",
        "date": "2020-01-12T11:49:16.000Z",
        "permalink": "/pages/0796ba76b4b55368",
        "categories": [
          "《JavaScript教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AJavaScript%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80.html",
      "relativePath": "《JavaScript教程》笔记/01.基础.md",
      "key": "v-371f9b4e",
      "path": "/pages/0796ba76b4b55368/",
      "headers": [
        {
          "level": 2,
          "title": "一、JS 的一些名词概念",
          "slug": "一、js-的一些名词概念"
        },
        {
          "level": 2,
          "title": "二、数据类型的转换",
          "slug": "二、数据类型的转换"
        },
        {
          "level": 3,
          "title": "1、强制（手动）转换",
          "slug": "_1、强制（手动）转换"
        },
        {
          "level": 3,
          "title": "2、自动转换",
          "slug": "_2、自动转换"
        },
        {
          "level": 2,
          "title": "三、错误处理机制",
          "slug": "三、错误处理机制"
        },
        {
          "level": 3,
          "title": "1、Error 实例对象",
          "slug": "_1、error-实例对象"
        },
        {
          "level": 3,
          "title": "2、原生错误类型",
          "slug": "_2、原生错误类型"
        },
        {
          "level": 3,
          "title": "3、自定义错误",
          "slug": "_3、自定义错误"
        },
        {
          "level": 3,
          "title": "4、throw 语句 （中断程序并抛出错误）",
          "slug": "_4、throw-语句-（中断程序并抛出错误）"
        },
        {
          "level": 3,
          "title": "5、try...catch 结构（捕获错误，对错误进行处理，不中断）",
          "slug": "_5、try-catch-结构（捕获错误，对错误进行处理，不中断）"
        },
        {
          "level": 3,
          "title": "6、finally 代码块（在 try..catch 最后，必执行的）",
          "slug": "_6、finally-代码块（在-try-catch-最后，必执行的）"
        },
        {
          "level": 2,
          "title": "四、console 对象",
          "slug": "四、console-对象"
        },
        {
          "level": 3,
          "title": "console.time()，console.timeEnd() （用于计算程序的用时）",
          "slug": "console-time-，console-timeend-（用于计算程序的用时）"
        },
        {
          "level": 2,
          "title": "文档",
          "slug": "文档"
        }
      ]
    },
    {
      "title": "接口",
      "frontmatter": {
        "title": "接口",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/54ea89b497ec3bb3",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/03.%E6%8E%A5%E5%8F%A3.html",
      "relativePath": "《TypeScript 从零实现 axios》/02.TypeScript 常用语法/03.接口.md",
      "key": "v-0f254f8e",
      "path": "/pages/54ea89b497ec3bb3/",
      "headers": [
        {
          "level": 2,
          "title": "接口初探",
          "slug": "接口初探"
        },
        {
          "level": 2,
          "title": "可选属性",
          "slug": "可选属性"
        },
        {
          "level": 2,
          "title": "只读属性",
          "slug": "只读属性"
        },
        {
          "level": 3,
          "title": "readonly vs const",
          "slug": "readonly-vs-const"
        },
        {
          "level": 2,
          "title": "额外的属性检查",
          "slug": "额外的属性检查"
        },
        {
          "level": 2,
          "title": "函数类型",
          "slug": "函数类型"
        },
        {
          "level": 2,
          "title": "可索引的类型",
          "slug": "可索引的类型"
        },
        {
          "level": 2,
          "title": "类类型",
          "slug": "类类型"
        },
        {
          "level": 3,
          "title": "实现接口",
          "slug": "实现接口"
        },
        {
          "level": 3,
          "title": "类静态部分与实例部分的区别",
          "slug": "类静态部分与实例部分的区别"
        },
        {
          "level": 2,
          "title": "继承接口",
          "slug": "继承接口"
        },
        {
          "level": 2,
          "title": "混合类型",
          "slug": "混合类型"
        },
        {
          "level": 2,
          "title": "接口继承类",
          "slug": "接口继承类"
        }
      ]
    },
    {
      "title": "类",
      "frontmatter": {
        "title": "类",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/fad060bd9a8bfac6",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/04.%E7%B1%BB.html",
      "relativePath": "《TypeScript 从零实现 axios》/02.TypeScript 常用语法/04.类.md",
      "key": "v-2384445c",
      "path": "/pages/fad060bd9a8bfac6/",
      "headers": [
        {
          "level": 2,
          "title": "基本示例",
          "slug": "基本示例"
        },
        {
          "level": 2,
          "title": "继承",
          "slug": "继承"
        },
        {
          "level": 2,
          "title": "公共，私有与受保护的修饰符",
          "slug": "公共，私有与受保护的修饰符"
        },
        {
          "level": 3,
          "title": "默认为 public",
          "slug": "默认为-public"
        },
        {
          "level": 3,
          "title": "理解 private",
          "slug": "理解-private"
        },
        {
          "level": 3,
          "title": "理解 protected",
          "slug": "理解-protected"
        },
        {
          "level": 2,
          "title": "readonly 修饰符",
          "slug": "readonly-修饰符"
        },
        {
          "level": 3,
          "title": "参数属性",
          "slug": "参数属性"
        },
        {
          "level": 2,
          "title": "存取器",
          "slug": "存取器"
        },
        {
          "level": 2,
          "title": "静态属性",
          "slug": "静态属性"
        },
        {
          "level": 2,
          "title": "抽象类",
          "slug": "抽象类"
        },
        {
          "level": 2,
          "title": "高级技巧",
          "slug": "高级技巧"
        },
        {
          "level": 3,
          "title": "构造函数",
          "slug": "构造函数"
        },
        {
          "level": 3,
          "title": "把类当做接口使用",
          "slug": "把类当做接口使用"
        }
      ]
    },
    {
      "title": "辅助模块单元测试",
      "frontmatter": {
        "title": "辅助模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/13f147a9b355c4c1",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8ATypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%20axios%E3%80%8B/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/03.%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "《TypeScript 从零实现 axios》/11.ts-axios 单元测试/03.辅助模块单元测试.md",
      "key": "v-0e4d6229",
      "path": "/pages/13f147a9b355c4c1/",
      "headers": [
        {
          "level": 2,
          "title": "准备工作",
          "slug": "准备工作"
        },
        {
          "level": 2,
          "title": "util 模块测试",
          "slug": "util-模块测试"
        },
        {
          "level": 2,
          "title": "cookie 模块测试",
          "slug": "cookie-模块测试"
        },
        {
          "level": 2,
          "title": "data 模块测试",
          "slug": "data-模块测试"
        },
        {
          "level": 2,
          "title": "error 模块测试",
          "slug": "error-模块测试"
        },
        {
          "level": 2,
          "title": "headers 模块测试",
          "slug": "headers-模块测试"
        },
        {
          "level": 2,
          "title": "url 模块测试",
          "slug": "url-模块测试"
        }
      ]
    },
    {
      "title": "Vuex",
      "frontmatter": {
        "title": "Vuex",
        "date": "2020-08-08T10:38:33.000Z",
        "permalink": "/pages/b30620/",
        "categories": [
          "《Vue》笔记",
          "Vuex"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/10.Vuex/01.Vuex.html",
      "relativePath": "《Vue》笔记/10.Vuex/01.Vuex.md",
      "key": "v-3b17fbb1",
      "path": "/pages/b30620/",
      "headers": [
        {
          "level": 2,
          "title": "Vuex 使用过程演示",
          "slug": "vuex-使用过程演示"
        },
        {
          "level": 2,
          "title": "核心概念",
          "slug": "核心概念"
        },
        {
          "level": 3,
          "title": "State",
          "slug": "state"
        },
        {
          "level": 3,
          "title": "Getter",
          "slug": "getter"
        },
        {
          "level": 3,
          "title": "Mutation",
          "slug": "mutation"
        },
        {
          "level": 3,
          "title": "Action",
          "slug": "action"
        },
        {
          "level": 2,
          "title": "更多",
          "slug": "更多"
        }
      ]
    },
    {
      "title": "数值的扩展",
      "frontmatter": {
        "title": "数值的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/5dfea9a0f2d1a392",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/07.%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "《ES6 教程》笔记/07.数值的扩展.md",
      "key": "v-a405ea6c",
      "path": "/pages/5dfea9a0f2d1a392/",
      "headers": [
        {
          "level": 2,
          "title": "二进制和八进制表示法",
          "slug": "二进制和八进制表示法"
        },
        {
          "level": 2,
          "title": "Number.isFinite() 是否为有限, Number.isNaN() 是否为NaN",
          "slug": "number-isfinite-是否为有限-number-isnan-是否为nan"
        },
        {
          "level": 2,
          "title": "Number.parseInt(), Number.parseFloat()",
          "slug": "number-parseint-number-parsefloat"
        },
        {
          "level": 2,
          "title": "Number.isInteger() 是否为整数",
          "slug": "number-isinteger-是否为整数"
        },
        {
          "level": 2,
          "title": "Number.EPSILON 用于浮点数误差检查",
          "slug": "number-epsilon-用于浮点数误差检查"
        },
        {
          "level": 2,
          "title": "安全整数和 Number.isSafeInteger()",
          "slug": "安全整数和-number-issafeinteger"
        },
        {
          "level": 2,
          "title": "Math 对象的扩展",
          "slug": "math-对象的扩展"
        },
        {
          "level": 3,
          "title": "Math.trunc() 去除一个数的小数部分，返回整数部分",
          "slug": "math-trunc-去除一个数的小数部分，返回整数部分"
        },
        {
          "level": 3,
          "title": "Math.sign() 判断一个数是正数、负数、还是零",
          "slug": "math-sign-判断一个数是正数、负数、还是零"
        },
        {
          "level": 3,
          "title": "Math.cbrt() 计算一个数的立方根",
          "slug": "math-cbrt-计算一个数的立方根"
        },
        {
          "level": 3,
          "title": "Math.clz32()",
          "slug": "math-clz32"
        },
        {
          "level": 3,
          "title": "Math.imul()",
          "slug": "math-imul"
        },
        {
          "level": 3,
          "title": "Math.fround()",
          "slug": "math-fround"
        },
        {
          "level": 3,
          "title": "Math.hypot()",
          "slug": "math-hypot"
        },
        {
          "level": 3,
          "title": "对数方法",
          "slug": "对数方法"
        },
        {
          "level": 3,
          "title": "双曲函数方法",
          "slug": "双曲函数方法"
        },
        {
          "level": 2,
          "title": "指数运算符",
          "slug": "指数运算符"
        },
        {
          "level": 2,
          "title": "BigInt 数据类型",
          "slug": "bigint-数据类型"
        },
        {
          "level": 3,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "BigInt 对象",
          "slug": "bigint-对象"
        },
        {
          "level": 3,
          "title": "转换规则",
          "slug": "转换规则"
        },
        {
          "level": 3,
          "title": "数学运算",
          "slug": "数学运算"
        },
        {
          "level": 3,
          "title": "其他运算",
          "slug": "其他运算"
        }
      ],
      "excerpt": "<h1 id=\"数值的扩展\"><a class=\"header-anchor\" href=\"#数值的扩展\">#</a> 数值的扩展</h1>\n<h2 id=\"二进制和八进制表示法\"><a class=\"header-anchor\" href=\"#二进制和八进制表示法\">#</a> 二进制和八进制表示法</h2>\n<p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀<code>0b</code>（或<code>0B</code>）和<code>0o</code>（或<code>0O</code>）表示。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token number\">0b111110111</span> <span class=\"token operator\">===</span> <span class=\"token number\">503</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">0o767</span> <span class=\"token operator\">===</span> <span class=\"token number\">503</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "数组的扩展",
      "frontmatter": {
        "title": "数组的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/e34009d60d8bc4b2",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/09.%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "《ES6 教程》笔记/09.数组的扩展.md",
      "key": "v-3dbd05f7",
      "path": "/pages/e34009d60d8bc4b2/",
      "headers": [
        {
          "level": 2,
          "title": "扩展运算符",
          "slug": "扩展运算符"
        },
        {
          "level": 3,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 3,
          "title": "替代函数的 apply 方法",
          "slug": "替代函数的-apply-方法"
        },
        {
          "level": 3,
          "title": "扩展运算符的应用",
          "slug": "扩展运算符的应用"
        },
        {
          "level": 2,
          "title": "Array.from()",
          "slug": "array-from"
        },
        {
          "level": 2,
          "title": "Array.of() 总是返回参数值组成的数组",
          "slug": "array-of-总是返回参数值组成的数组"
        },
        {
          "level": 2,
          "title": "数组实例的 copyWithin()",
          "slug": "数组实例的-copywithin"
        },
        {
          "level": 2,
          "title": "数组实例的 find() 和 findIndex()",
          "slug": "数组实例的-find-和-findindex"
        },
        {
          "level": 2,
          "title": "数组实例的 fill()",
          "slug": "数组实例的-fill"
        },
        {
          "level": 2,
          "title": "数组实例的 entries()，keys() 和 values()",
          "slug": "数组实例的-entries-，keys-和-values"
        },
        {
          "level": 2,
          "title": "数组实例的 includes()",
          "slug": "数组实例的-includes"
        },
        {
          "level": 2,
          "title": "数组实例的 flat()，flatMap()",
          "slug": "数组实例的-flat-，flatmap"
        },
        {
          "level": 2,
          "title": "数组的空位",
          "slug": "数组的空位"
        },
        {
          "level": 2,
          "title": "Array.prototype.sort() 的排序稳定性",
          "slug": "array-prototype-sort-的排序稳定性"
        }
      ],
      "excerpt": "<h1 id=\"数组的扩展\"><a class=\"header-anchor\" href=\"#数组的扩展\">#</a> 数组的扩展</h1>\n<h2 id=\"扩展运算符\"><a class=\"header-anchor\" href=\"#扩展运算符\">#</a> 扩展运算符</h2>\n<h3 id=\"含义\"><a class=\"header-anchor\" href=\"#含义\">#</a> 含义</h3>\n<p>扩展运算符（spread）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，<strong>将一个数组转为用逗号分隔的参数序列</strong>。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1 2 3</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1 2 3 4 5</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// [&lt;div>, &lt;div>, &lt;div>]</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "对象的扩展",
      "frontmatter": {
        "title": "对象的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/b5e3e0a0ff6e9c25",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/10.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "《ES6 教程》笔记/10.对象的扩展.md",
      "key": "v-83e9656c",
      "path": "/pages/b5e3e0a0ff6e9c25/",
      "headers": [
        {
          "level": 2,
          "title": "属性的简洁表示法",
          "slug": "属性的简洁表示法"
        },
        {
          "level": 2,
          "title": "属性名表达式",
          "slug": "属性名表达式"
        },
        {
          "level": 2,
          "title": "方法的 name 属性",
          "slug": "方法的-name-属性"
        },
        {
          "level": 2,
          "title": "属性的可枚举性和遍历",
          "slug": "属性的可枚举性和遍历"
        },
        {
          "level": 3,
          "title": "可枚举性",
          "slug": "可枚举性"
        },
        {
          "level": 3,
          "title": "属性的遍历",
          "slug": "属性的遍历"
        },
        {
          "level": 2,
          "title": "super 关键字",
          "slug": "super-关键字"
        },
        {
          "level": 2,
          "title": "对象的扩展运算符",
          "slug": "对象的扩展运算符"
        },
        {
          "level": 3,
          "title": "解构赋值",
          "slug": "解构赋值"
        },
        {
          "level": 3,
          "title": "扩展运算符",
          "slug": "扩展运算符"
        },
        {
          "level": 2,
          "title": "链判断运算符",
          "slug": "链判断运算符"
        },
        {
          "level": 2,
          "title": "Null 判断运算符",
          "slug": "null-判断运算符"
        }
      ],
      "excerpt": "<h1 id=\"对象的扩展\"><a class=\"header-anchor\" href=\"#对象的扩展\">#</a> 对象的扩展</h1>\n<p>对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍<code>Object</code>对象的新增方法。</p>\n"
    },
    {
      "title": "Generator 函数的异步应用",
      "frontmatter": {
        "title": "Generator 函数的异步应用",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/75af7031eb66847b",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/19.Generator%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8.html",
      "relativePath": "《ES6 教程》笔记/19.Generator 函数的异步应用.md",
      "key": "v-8e67e4f6",
      "path": "/pages/75af7031eb66847b/",
      "headers": [
        {
          "level": 2,
          "title": "传统方法",
          "slug": "传统方法"
        },
        {
          "level": 2,
          "title": "基本概念",
          "slug": "基本概念"
        },
        {
          "level": 3,
          "title": "异步",
          "slug": "异步"
        },
        {
          "level": 3,
          "title": "回调函数",
          "slug": "回调函数"
        },
        {
          "level": 3,
          "title": "Promise",
          "slug": "promise"
        },
        {
          "level": 2,
          "title": "Generator 函数",
          "slug": "generator-函数"
        },
        {
          "level": 3,
          "title": "协程",
          "slug": "协程"
        },
        {
          "level": 3,
          "title": "协程的 Generator 函数实现",
          "slug": "协程的-generator-函数实现"
        },
        {
          "level": 3,
          "title": "Generator 函数的数据交换和错误处理",
          "slug": "generator-函数的数据交换和错误处理"
        },
        {
          "level": 3,
          "title": "异步任务的封装",
          "slug": "异步任务的封装"
        },
        {
          "level": 2,
          "title": "Thunk 函数",
          "slug": "thunk-函数"
        },
        {
          "level": 3,
          "title": "参数的求值策略",
          "slug": "参数的求值策略"
        },
        {
          "level": 3,
          "title": "Thunk 函数的含义",
          "slug": "thunk-函数的含义"
        },
        {
          "level": 3,
          "title": "JavaScript 语言的 Thunk 函数",
          "slug": "javascript-语言的-thunk-函数"
        },
        {
          "level": 3,
          "title": "Thunkify 模块",
          "slug": "thunkify-模块"
        },
        {
          "level": 3,
          "title": "Generator 函数的流程管理",
          "slug": "generator-函数的流程管理"
        },
        {
          "level": 3,
          "title": "Thunk 函数的自动流程管理",
          "slug": "thunk-函数的自动流程管理"
        },
        {
          "level": 2,
          "title": "co 模块",
          "slug": "co-模块"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "co 模块的原理",
          "slug": "co-模块的原理"
        },
        {
          "level": 3,
          "title": "基于 Promise 对象的自动执行",
          "slug": "基于-promise-对象的自动执行"
        },
        {
          "level": 3,
          "title": "co 模块的源码",
          "slug": "co-模块的源码"
        },
        {
          "level": 3,
          "title": "处理并发的异步操作",
          "slug": "处理并发的异步操作"
        },
        {
          "level": 3,
          "title": "实例：处理 Stream",
          "slug": "实例：处理-stream"
        }
      ],
      "excerpt": "<h1 id=\"generator-函数的异步应用\"><a class=\"header-anchor\" href=\"#generator-函数的异步应用\">#</a> Generator 函数的异步应用</h1>\n<p>异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 Generator 函数如何完成异步操作。</p>\n"
    },
    {
      "title": "async 函数",
      "frontmatter": {
        "title": "async 函数",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/3777253e65bac487",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/20.async%20%E5%87%BD%E6%95%B0.html",
      "relativePath": "《ES6 教程》笔记/20.async 函数.md",
      "key": "v-06b46cbc",
      "path": "/pages/3777253e65bac487/",
      "headers": [
        {
          "level": 2,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 2,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 2,
          "title": "语法",
          "slug": "语法"
        },
        {
          "level": 3,
          "title": "返回 Promise 对象",
          "slug": "返回-promise-对象"
        },
        {
          "level": 3,
          "title": "Promise 对象的状态变化",
          "slug": "promise-对象的状态变化"
        },
        {
          "level": 3,
          "title": "await 命令",
          "slug": "await-命令"
        },
        {
          "level": 3,
          "title": "错误处理",
          "slug": "错误处理"
        },
        {
          "level": 3,
          "title": "使用注意点",
          "slug": "使用注意点"
        },
        {
          "level": 2,
          "title": "async 函数的实现原理",
          "slug": "async-函数的实现原理"
        },
        {
          "level": 2,
          "title": "与其他异步处理方法的比较",
          "slug": "与其他异步处理方法的比较"
        },
        {
          "level": 2,
          "title": "实例：按顺序完成异步操作",
          "slug": "实例：按顺序完成异步操作"
        },
        {
          "level": 2,
          "title": "顶层 await",
          "slug": "顶层-await"
        }
      ],
      "excerpt": "<h1 id=\"async-函数\"><a class=\"header-anchor\" href=\"#async-函数\">#</a> async 函数</h1>\n<h2 id=\"含义\"><a class=\"header-anchor\" href=\"#含义\">#</a> 含义</h2>\n<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\n<p>async 函数是什么？一句话，它就<strong>是 Generator 函数的语法糖</strong>。</p>\n<p>前文有一个 Generator 函数，依次读取两个文件。</p>\n"
    },
    {
      "title": "Iterator 和 for-of 循环",
      "frontmatter": {
        "title": "Iterator 和 for-of 循环",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/48df907ad3570f3d",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/17.Iterator%20%E5%92%8C%20for-of%20%E5%BE%AA%E7%8E%AF.html",
      "relativePath": "《ES6 教程》笔记/17.Iterator 和 for-of 循环.md",
      "key": "v-7a5d1b42",
      "path": "/pages/48df907ad3570f3d/",
      "headers": [
        {
          "level": 2,
          "title": "Iterator（遍历器）的概念",
          "slug": "iterator（遍历器）的概念"
        },
        {
          "level": 2,
          "title": "默认 Iterator 接口",
          "slug": "默认-iterator-接口"
        },
        {
          "level": 2,
          "title": "调用 Iterator 接口的场合",
          "slug": "调用-iterator-接口的场合"
        },
        {
          "level": 2,
          "title": "字符串的 Iterator 接口",
          "slug": "字符串的-iterator-接口"
        },
        {
          "level": 2,
          "title": "Iterator 接口与 Generator 函数",
          "slug": "iterator-接口与-generator-函数"
        },
        {
          "level": 2,
          "title": "遍历器对象的 return()，throw()",
          "slug": "遍历器对象的-return-，throw"
        },
        {
          "level": 2,
          "title": "for...of 循环",
          "slug": "for-of-循环"
        },
        {
          "level": 3,
          "title": "数组",
          "slug": "数组"
        },
        {
          "level": 3,
          "title": "Set 和 Map 结构",
          "slug": "set-和-map-结构"
        },
        {
          "level": 3,
          "title": "计算生成的数据结构",
          "slug": "计算生成的数据结构"
        },
        {
          "level": 3,
          "title": "类似数组的对象",
          "slug": "类似数组的对象"
        },
        {
          "level": 3,
          "title": "对象",
          "slug": "对象"
        },
        {
          "level": 3,
          "title": "与其他遍历语法的比较",
          "slug": "与其他遍历语法的比较"
        }
      ],
      "excerpt": "<h1 id=\"iterator-和-for-of-循环\"><a class=\"header-anchor\" href=\"#iterator-和-for-of-循环\">#</a> Iterator 和 for...of 循环</h1>\n<h2 id=\"iterator（遍历器）的概念\"><a class=\"header-anchor\" href=\"#iterator（遍历器）的概念\">#</a> Iterator（遍历器）的概念</h2>\n<p>JavaScript 原有的表示“集合”的数据结构，主要是数组（<code>Array</code>）和对象（<code>Object</code>），ES6 又添加了<code>Map</code>和<code>Set</code>。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是<code>Map</code>，<code>Map</code>的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。</p>\n"
    },
    {
      "title": "Class 的基本语法",
      "frontmatter": {
        "title": "Class 的基本语法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/e831e1593c82bbe0",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/21.Class%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html",
      "relativePath": "《ES6 教程》笔记/21.Class 的基本语法.md",
      "key": "v-4e4cae94",
      "path": "/pages/e831e1593c82bbe0/",
      "headers": [
        {
          "level": 2,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "类的由来",
          "slug": "类的由来"
        },
        {
          "level": 3,
          "title": "constructor 方法",
          "slug": "constructor-方法"
        },
        {
          "level": 3,
          "title": "类的实例",
          "slug": "类的实例"
        },
        {
          "level": 3,
          "title": "取值函数（getter）和存值函数（setter）",
          "slug": "取值函数（getter）和存值函数（setter）"
        },
        {
          "level": 3,
          "title": "属性表达式",
          "slug": "属性表达式"
        },
        {
          "level": 3,
          "title": "Class 表达式",
          "slug": "class-表达式"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        },
        {
          "level": 2,
          "title": "静态方法",
          "slug": "静态方法"
        },
        {
          "level": 2,
          "title": "实例属性的新写法",
          "slug": "实例属性的新写法"
        },
        {
          "level": 2,
          "title": "静态属性",
          "slug": "静态属性"
        },
        {
          "level": 2,
          "title": "私有方法和私有属性",
          "slug": "私有方法和私有属性"
        },
        {
          "level": 3,
          "title": "现有的解决方案",
          "slug": "现有的解决方案"
        },
        {
          "level": 3,
          "title": "私有属性的提案",
          "slug": "私有属性的提案"
        },
        {
          "level": 2,
          "title": "new.target 属性",
          "slug": "new-target-属性"
        }
      ],
      "excerpt": "<h1 id=\"class-的基本语法\"><a class=\"header-anchor\" href=\"#class-的基本语法\">#</a> Class 的基本语法</h1>\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"类的由来\"><a class=\"header-anchor\" href=\"#类的由来\">#</a> 类的由来</h3>\n<p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'('</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "Module 的语法",
      "frontmatter": {
        "title": "Module 的语法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/efe2fb04eb8ac5fb",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/23.Module%20%E7%9A%84%E8%AF%AD%E6%B3%95.html",
      "relativePath": "《ES6 教程》笔记/23.Module 的语法.md",
      "key": "v-00d2c04e",
      "path": "/pages/efe2fb04eb8ac5fb/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "严格模式",
          "slug": "严格模式"
        },
        {
          "level": 2,
          "title": "export 命令",
          "slug": "export-命令"
        },
        {
          "level": 2,
          "title": "import 命令",
          "slug": "import-命令"
        },
        {
          "level": 2,
          "title": "模块的整体加载-(星号*)",
          "slug": "模块的整体加载-星号"
        },
        {
          "level": 2,
          "title": "export default 命令",
          "slug": "export-default-命令"
        },
        {
          "level": 2,
          "title": "export 与 import 的复合写法",
          "slug": "export-与-import-的复合写法"
        },
        {
          "level": 2,
          "title": "模块的继承",
          "slug": "模块的继承"
        },
        {
          "level": 2,
          "title": "跨模块常量",
          "slug": "跨模块常量"
        },
        {
          "level": 2,
          "title": "import()",
          "slug": "import"
        },
        {
          "level": 3,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "适用场合",
          "slug": "适用场合"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        }
      ],
      "excerpt": "<h1 id=\"module-的语法\"><a class=\"header-anchor\" href=\"#module-的语法\">#</a> Module 的语法</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的<code>require</code>、Python 的<code>import</code>，甚至就连 CSS 都有<code>@import</code>，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p>\n"
    },
    {
      "title": "Module 的加载实现",
      "frontmatter": {
        "title": "Module 的加载实现",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/a79ca2e64ceae213",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/24.Module%20%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "《ES6 教程》笔记/24.Module 的加载实现.md",
      "key": "v-0579f2f2",
      "path": "/pages/a79ca2e64ceae213/",
      "headers": [
        {
          "level": 2,
          "title": "浏览器加载",
          "slug": "浏览器加载"
        },
        {
          "level": 3,
          "title": "传统方法",
          "slug": "传统方法"
        },
        {
          "level": 3,
          "title": "加载规则",
          "slug": "加载规则"
        },
        {
          "level": 2,
          "title": "ES6 模块与 CommonJS 模块的差异",
          "slug": "es6-模块与-commonjs-模块的差异"
        },
        {
          "level": 2,
          "title": "Node.js 加载",
          "slug": "node-js-加载"
        },
        {
          "level": 3,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 3,
          "title": "main 字段",
          "slug": "main-字段"
        },
        {
          "level": 3,
          "title": "exports 字段",
          "slug": "exports-字段"
        },
        {
          "level": 3,
          "title": "ES6 模块加载 CommonJS 模块",
          "slug": "es6-模块加载-commonjs-模块"
        },
        {
          "level": 3,
          "title": "CommonJS 模块加载 ES6 模块",
          "slug": "commonjs-模块加载-es6-模块"
        },
        {
          "level": 3,
          "title": "Node.js 的内置模块",
          "slug": "node-js-的内置模块"
        },
        {
          "level": 3,
          "title": "加载路径",
          "slug": "加载路径"
        },
        {
          "level": 3,
          "title": "内部变量",
          "slug": "内部变量"
        },
        {
          "level": 2,
          "title": "循环加载",
          "slug": "循环加载"
        },
        {
          "level": 3,
          "title": "CommonJS 模块的加载原理",
          "slug": "commonjs-模块的加载原理"
        },
        {
          "level": 3,
          "title": "CommonJS 模块的循环加载",
          "slug": "commonjs-模块的循环加载"
        },
        {
          "level": 3,
          "title": "ES6 模块的循环加载",
          "slug": "es6-模块的循环加载"
        }
      ],
      "excerpt": "<h1 id=\"module-的加载实现\"><a class=\"header-anchor\" href=\"#module-的加载实现\">#</a> Module 的加载实现</h1>\n<p>上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。</p>\n"
    },
    {
      "title": "参考链接",
      "frontmatter": {
        "title": "参考链接",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/ea6f3b870f6dab69",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/34.%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5.html",
      "relativePath": "《ES6 教程》笔记/34.参考链接.md",
      "key": "v-6a5d1593",
      "path": "/pages/ea6f3b870f6dab69/",
      "headers": [
        {
          "level": 2,
          "title": "官方文件",
          "slug": "官方文件"
        },
        {
          "level": 2,
          "title": "综合介绍",
          "slug": "综合介绍"
        },
        {
          "level": 2,
          "title": "let 和 const",
          "slug": "let-和-const"
        },
        {
          "level": 2,
          "title": "解构赋值",
          "slug": "解构赋值"
        },
        {
          "level": 2,
          "title": "字符串",
          "slug": "字符串"
        },
        {
          "level": 2,
          "title": "正则",
          "slug": "正则"
        },
        {
          "level": 2,
          "title": "数值",
          "slug": "数值"
        },
        {
          "level": 2,
          "title": "数组",
          "slug": "数组"
        },
        {
          "level": 2,
          "title": "函数",
          "slug": "函数"
        },
        {
          "level": 2,
          "title": "对象",
          "slug": "对象"
        },
        {
          "level": 2,
          "title": "Symbol",
          "slug": "symbol"
        },
        {
          "level": 2,
          "title": "Set 和 Map",
          "slug": "set-和-map"
        },
        {
          "level": 2,
          "title": "Proxy 和 Reflect",
          "slug": "proxy-和-reflect"
        },
        {
          "level": 2,
          "title": "Promise 对象",
          "slug": "promise-对象"
        },
        {
          "level": 2,
          "title": "Iterator",
          "slug": "iterator"
        },
        {
          "level": 2,
          "title": "Generator",
          "slug": "generator"
        },
        {
          "level": 2,
          "title": "异步操作和 Async 函数",
          "slug": "异步操作和-async-函数"
        },
        {
          "level": 2,
          "title": "Class",
          "slug": "class"
        },
        {
          "level": 2,
          "title": "Decorator",
          "slug": "decorator"
        },
        {
          "level": 2,
          "title": "Module",
          "slug": "module"
        },
        {
          "level": 2,
          "title": "二进制数组",
          "slug": "二进制数组"
        },
        {
          "level": 2,
          "title": "SIMD",
          "slug": "simd"
        },
        {
          "level": 2,
          "title": "工具",
          "slug": "工具"
        }
      ]
    },
    {
      "title": "SIMD",
      "frontmatter": {
        "title": "SIMD",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/8e8f80f69b775a56",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/33.SIMD.html",
      "relativePath": "《ES6 教程》笔记/33.SIMD.md",
      "key": "v-5fffa9b4",
      "path": "/pages/8e8f80f69b775a56/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "数据类型",
          "slug": "数据类型"
        },
        {
          "level": 2,
          "title": "静态方法：数学运算",
          "slug": "静态方法：数学运算"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.abs()，SIMD.%type%.neg()",
          "slug": "simd-type-abs-，simd-type-neg"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.add()，SIMD.%type%.addSaturate()",
          "slug": "simd-type-add-，simd-type-addsaturate"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.sub()，SIMD.%type%.subSaturate()",
          "slug": "simd-type-sub-，simd-type-subsaturate"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt()",
          "slug": "simd-type-mul-，simd-type-div-，simd-type-sqrt"
        },
        {
          "level": 3,
          "title": "SIMD.%FloatType%.reciprocalApproximation()，SIMD.%type%.reciprocalSqrtApproximation()",
          "slug": "simd-floattype-reciprocalapproximation-，simd-type-reciprocalsqrtapproximation"
        },
        {
          "level": 3,
          "title": "SIMD.%IntegerType%.shiftLeftByScalar()",
          "slug": "simd-integertype-shiftleftbyscalar"
        },
        {
          "level": 3,
          "title": "SIMD.%IntegerType%.shiftRightByScalar()",
          "slug": "simd-integertype-shiftrightbyscalar"
        },
        {
          "level": 2,
          "title": "静态方法：通道处理",
          "slug": "静态方法：通道处理"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.check()",
          "slug": "simd-type-check"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.extractLane()，SIMD.%type%.replaceLane()",
          "slug": "simd-type-extractlane-，simd-type-replacelane"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.load()",
          "slug": "simd-type-load"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.store()",
          "slug": "simd-type-store"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.splat()",
          "slug": "simd-type-splat"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.swizzle()",
          "slug": "simd-type-swizzle"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.shuffle()",
          "slug": "simd-type-shuffle"
        },
        {
          "level": 2,
          "title": "静态方法：比较运算",
          "slug": "静态方法：比较运算"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.equal()，SIMD.%type%.notEqual()",
          "slug": "simd-type-equal-，simd-type-notequal"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual()",
          "slug": "simd-type-greaterthan-，simd-type-greaterthanorequal"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual()",
          "slug": "simd-type-lessthan-，simd-type-lessthanorequal"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.select()",
          "slug": "simd-type-select"
        },
        {
          "level": 3,
          "title": "SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue()",
          "slug": "simd-booleantype-alltrue-，simd-booleantype-anytrue"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.min()，SIMD.%type%.minNum()",
          "slug": "simd-type-min-，simd-type-minnum"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.max()，SIMD.%type%.maxNum()",
          "slug": "simd-type-max-，simd-type-maxnum"
        },
        {
          "level": 2,
          "title": "静态方法：位运算",
          "slug": "静态方法：位运算"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not()",
          "slug": "simd-type-and-，simd-type-or-，simd-type-xor-，simd-type-not"
        },
        {
          "level": 2,
          "title": "静态方法：数据类型转换",
          "slug": "静态方法：数据类型转换"
        },
        {
          "level": 2,
          "title": "实例方法",
          "slug": "实例方法"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.prototype.toString()",
          "slug": "simd-type-prototype-tostring"
        },
        {
          "level": 2,
          "title": "实例：求平均值",
          "slug": "实例：求平均值"
        }
      ],
      "excerpt": "<h1 id=\"simd\"><a class=\"header-anchor\" href=\"#simd\">#</a> SIMD</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>SIMD（发音<code>/sim-dee/</code>）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这是一种不同的运算执行模式。与它相对的是 SISD（“Single Instruction/Single Data”），即“单指令，单数据”。</p>\n"
    },
    {
      "title": "Symbol",
      "frontmatter": {
        "title": "Symbol",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/02c86eb2792f3262",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/12.Symbol.html",
      "relativePath": "《ES6 教程》笔记/12.Symbol.md",
      "key": "v-17bcde60",
      "path": "/pages/02c86eb2792f3262/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "Symbol.prototype.description",
          "slug": "symbol-prototype-description"
        },
        {
          "level": 2,
          "title": "作为属性名的 Symbol",
          "slug": "作为属性名的-symbol"
        },
        {
          "level": 2,
          "title": "实例：消除魔术字符串",
          "slug": "实例：消除魔术字符串"
        },
        {
          "level": 2,
          "title": "属性名的遍历",
          "slug": "属性名的遍历"
        },
        {
          "level": 2,
          "title": "Symbol.for()，Symbol.keyFor()",
          "slug": "symbol-for-，symbol-keyfor"
        },
        {
          "level": 2,
          "title": "实例：模块的 Singleton 模式",
          "slug": "实例：模块的-singleton-模式"
        },
        {
          "level": 2,
          "title": "内置的 Symbol 值",
          "slug": "内置的-symbol-值"
        },
        {
          "level": 3,
          "title": "Symbol.hasInstance",
          "slug": "symbol-hasinstance"
        },
        {
          "level": 3,
          "title": "Symbol.isConcatSpreadable",
          "slug": "symbol-isconcatspreadable"
        },
        {
          "level": 3,
          "title": "Symbol.species",
          "slug": "symbol-species"
        },
        {
          "level": 3,
          "title": "Symbol.match",
          "slug": "symbol-match"
        },
        {
          "level": 3,
          "title": "Symbol.replace",
          "slug": "symbol-replace"
        },
        {
          "level": 3,
          "title": "Symbol.search",
          "slug": "symbol-search"
        },
        {
          "level": 3,
          "title": "Symbol.split",
          "slug": "symbol-split"
        },
        {
          "level": 3,
          "title": "Symbol.iterator",
          "slug": "symbol-iterator"
        },
        {
          "level": 3,
          "title": "Symbol.toPrimitive",
          "slug": "symbol-toprimitive"
        },
        {
          "level": 3,
          "title": "Symbol.toStringTag",
          "slug": "symbol-tostringtag"
        },
        {
          "level": 3,
          "title": "Symbol.unscopables",
          "slug": "symbol-unscopables"
        }
      ],
      "excerpt": "<h1 id=\"symbol\"><a class=\"header-anchor\" href=\"#symbol\">#</a> Symbol</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，<strong>保证每个属性的名字都是独一无二</strong>的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因。</p>\n"
    },
    {
      "title": "Set 和 Map 数据结构",
      "frontmatter": {
        "title": "Set 和 Map 数据结构",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/0c21dae358fca16b",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/13.Set%20%E5%92%8C%20Map%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",
      "relativePath": "《ES6 教程》笔记/13.Set 和 Map 数据结构.md",
      "key": "v-5f86c12e",
      "path": "/pages/0c21dae358fca16b/",
      "headers": [
        {
          "level": 2,
          "title": "Set",
          "slug": "set"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "Set 实例的属性和方法",
          "slug": "set-实例的属性和方法"
        },
        {
          "level": 3,
          "title": "遍历操作",
          "slug": "遍历操作"
        },
        {
          "level": 2,
          "title": "WeakSet",
          "slug": "weakset"
        },
        {
          "level": 3,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 3,
          "title": "语法",
          "slug": "语法"
        },
        {
          "level": 2,
          "title": "Map",
          "slug": "map"
        },
        {
          "level": 3,
          "title": "含义和基本用法",
          "slug": "含义和基本用法"
        },
        {
          "level": 3,
          "title": "实例的属性和操作方法",
          "slug": "实例的属性和操作方法"
        },
        {
          "level": 3,
          "title": "遍历方法",
          "slug": "遍历方法"
        },
        {
          "level": 3,
          "title": "与其他数据结构的互相转换",
          "slug": "与其他数据结构的互相转换"
        },
        {
          "level": 2,
          "title": "WeakMap",
          "slug": "weakmap"
        },
        {
          "level": 3,
          "title": "含义",
          "slug": "含义-2"
        },
        {
          "level": 3,
          "title": "WeakMap 的语法",
          "slug": "weakmap-的语法"
        },
        {
          "level": 3,
          "title": "WeakMap 的示例",
          "slug": "weakmap-的示例"
        },
        {
          "level": 3,
          "title": "WeakMap 的用途",
          "slug": "weakmap-的用途"
        }
      ],
      "excerpt": "<h1 id=\"set-和-map-数据结构\"><a class=\"header-anchor\" href=\"#set-和-map-数据结构\">#</a> Set 和 Map 数据结构</h1>\n<h2 id=\"set\"><a class=\"header-anchor\" href=\"#set\">#</a> Set</h2>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>ES6 提供了新的数据结构 Set。它<strong>类似于数组，但是成员的值都是唯一的，没有重复的值</strong>。</p>\n<p><strong><code>Set</code>本身是一个构造函数，用来生成 Set 数据结构</strong>。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2 3 5 4</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "Proxy",
      "frontmatter": {
        "title": "Proxy",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/f56ec2ab97d60483",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/14.Proxy.html",
      "relativePath": "《ES6 教程》笔记/14.Proxy.md",
      "key": "v-4c5d0570",
      "path": "/pages/f56ec2ab97d60483/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "Proxy 实例的方法",
          "slug": "proxy-实例的方法"
        },
        {
          "level": 3,
          "title": "get()",
          "slug": "get"
        },
        {
          "level": 3,
          "title": "set()",
          "slug": "set"
        },
        {
          "level": 3,
          "title": "apply()",
          "slug": "apply"
        },
        {
          "level": 3,
          "title": "has()",
          "slug": "has"
        },
        {
          "level": 3,
          "title": "construct()",
          "slug": "construct"
        },
        {
          "level": 3,
          "title": "deleteProperty()",
          "slug": "deleteproperty"
        },
        {
          "level": 3,
          "title": "defineProperty()",
          "slug": "defineproperty"
        },
        {
          "level": 3,
          "title": "getOwnPropertyDescriptor()",
          "slug": "getownpropertydescriptor"
        },
        {
          "level": 3,
          "title": "getPrototypeOf()",
          "slug": "getprototypeof"
        },
        {
          "level": 3,
          "title": "isExtensible()",
          "slug": "isextensible"
        },
        {
          "level": 3,
          "title": "ownKeys()",
          "slug": "ownkeys"
        },
        {
          "level": 3,
          "title": "preventExtensions()",
          "slug": "preventextensions"
        },
        {
          "level": 3,
          "title": "setPrototypeOf()",
          "slug": "setprototypeof"
        },
        {
          "level": 2,
          "title": "Proxy.revocable()",
          "slug": "proxy-revocable"
        },
        {
          "level": 2,
          "title": "this 问题",
          "slug": "this-问题"
        },
        {
          "level": 2,
          "title": "实例：Web 服务的客户端",
          "slug": "实例：web-服务的客户端"
        }
      ],
      "excerpt": "<h1 id=\"proxy\"><a class=\"header-anchor\" href=\"#proxy\">#</a> Proxy</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“<strong>元编程</strong>”（meta programming），即<strong>对编程语言进行编程</strong>。</p>\n<p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，<strong>外界对该对象的访问，都必须先通过这层拦截</strong>，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p>\n"
    },
    {
      "title": "Promise 对象",
      "frontmatter": {
        "title": "Promise 对象",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/2810ae8985e9bd52",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/16.Promise%20%E5%AF%B9%E8%B1%A1.html",
      "relativePath": "《ES6 教程》笔记/16.Promise 对象.md",
      "key": "v-c26a5f9e",
      "path": "/pages/2810ae8985e9bd52/",
      "headers": [
        {
          "level": 2,
          "title": "Promise 的含义",
          "slug": "promise-的含义"
        },
        {
          "level": 2,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 2,
          "title": "Promise.prototype.then()",
          "slug": "promise-prototype-then"
        },
        {
          "level": 2,
          "title": "Promise.prototype.catch()",
          "slug": "promise-prototype-catch"
        },
        {
          "level": 2,
          "title": "Promise.prototype.finally()",
          "slug": "promise-prototype-finally"
        },
        {
          "level": 2,
          "title": "Promise.all()",
          "slug": "promise-all"
        },
        {
          "level": 2,
          "title": "Promise.race()",
          "slug": "promise-race"
        },
        {
          "level": 2,
          "title": "Promise.allSettled()",
          "slug": "promise-allsettled"
        },
        {
          "level": 2,
          "title": "Promise.any()",
          "slug": "promise-any"
        },
        {
          "level": 2,
          "title": "Promise.resolve()",
          "slug": "promise-resolve"
        },
        {
          "level": 2,
          "title": "Promise.reject()",
          "slug": "promise-reject"
        },
        {
          "level": 2,
          "title": "应用",
          "slug": "应用"
        },
        {
          "level": 3,
          "title": "加载图片",
          "slug": "加载图片"
        },
        {
          "level": 3,
          "title": "Generator 函数与 Promise 的结合",
          "slug": "generator-函数与-promise-的结合"
        },
        {
          "level": 2,
          "title": "Promise.try()",
          "slug": "promise-try"
        }
      ],
      "excerpt": "<h1 id=\"promise-对象\"><a class=\"header-anchor\" href=\"#promise-对象\">#</a> Promise 对象</h1>\n<h2 id=\"promise-的含义\"><a class=\"header-anchor\" href=\"#promise-的含义\">#</a> Promise 的含义</h2>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p>\n"
    },
    {
      "title": "函数的扩展",
      "frontmatter": {
        "title": "函数的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/8ed309d668b20264",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/08.%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "《ES6 教程》笔记/08.函数的扩展.md",
      "key": "v-99905c86",
      "path": "/pages/8ed309d668b20264/",
      "headers": [
        {
          "level": 2,
          "title": "函数参数的默认值",
          "slug": "函数参数的默认值"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "与解构赋值默认值结合使用",
          "slug": "与解构赋值默认值结合使用"
        },
        {
          "level": 3,
          "title": "参数默认值的位置",
          "slug": "参数默认值的位置"
        },
        {
          "level": 3,
          "title": "函数的 length 属性",
          "slug": "函数的-length-属性"
        },
        {
          "level": 3,
          "title": "作用域",
          "slug": "作用域"
        },
        {
          "level": 3,
          "title": "应用",
          "slug": "应用"
        },
        {
          "level": 2,
          "title": "rest 参数",
          "slug": "rest-参数"
        },
        {
          "level": 2,
          "title": "严格模式",
          "slug": "严格模式"
        },
        {
          "level": 2,
          "title": "name 属性",
          "slug": "name-属性"
        },
        {
          "level": 2,
          "title": "箭头函数",
          "slug": "箭头函数"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法-2"
        },
        {
          "level": 3,
          "title": "使用注意点",
          "slug": "使用注意点"
        },
        {
          "level": 3,
          "title": "不适用场合",
          "slug": "不适用场合"
        },
        {
          "level": 3,
          "title": "嵌套的箭头函数",
          "slug": "嵌套的箭头函数"
        },
        {
          "level": 2,
          "title": "尾调用优化",
          "slug": "尾调用优化"
        },
        {
          "level": 3,
          "title": "什么是尾调用？",
          "slug": "什么是尾调用？"
        },
        {
          "level": 3,
          "title": "尾调用优化",
          "slug": "尾调用优化-2"
        },
        {
          "level": 3,
          "title": "尾递归",
          "slug": "尾递归"
        },
        {
          "level": 3,
          "title": "递归函数的改写",
          "slug": "递归函数的改写"
        },
        {
          "level": 3,
          "title": "严格模式",
          "slug": "严格模式-2"
        },
        {
          "level": 3,
          "title": "尾递归优化的实现",
          "slug": "尾递归优化的实现"
        },
        {
          "level": 2,
          "title": "函数参数的尾逗号",
          "slug": "函数参数的尾逗号"
        },
        {
          "level": 2,
          "title": "Function.prototype.toString()",
          "slug": "function-prototype-tostring"
        },
        {
          "level": 2,
          "title": "catch 命令的参数省略",
          "slug": "catch-命令的参数省略"
        }
      ],
      "excerpt": "<h1 id=\"函数的扩展\"><a class=\"header-anchor\" href=\"#函数的扩展\">#</a> 函数的扩展</h1>\n<h2 id=\"函数参数的默认值\"><a class=\"header-anchor\" href=\"#函数参数的默认值\">#</a> 函数参数的默认值</h2>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  y <span class=\"token operator\">=</span> y <span class=\"token operator\">||</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello World</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'China'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello China</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello World</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "Generator 函数的语法",
      "frontmatter": {
        "title": "Generator 函数的语法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/718b48ed9ce0adce",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/18.Generator%20%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95.html",
      "relativePath": "《ES6 教程》笔记/18.Generator 函数的语法.md",
      "key": "v-5205fe74",
      "path": "/pages/718b48ed9ce0adce/",
      "headers": [
        {
          "level": 2,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "基本概念",
          "slug": "基本概念"
        },
        {
          "level": 3,
          "title": "yield 表达式",
          "slug": "yield-表达式"
        },
        {
          "level": 3,
          "title": "与 Iterator 接口的关系",
          "slug": "与-iterator-接口的关系"
        },
        {
          "level": 2,
          "title": "next 方法的参数",
          "slug": "next-方法的参数"
        },
        {
          "level": 2,
          "title": "for...of 循环",
          "slug": "for-of-循环"
        },
        {
          "level": 2,
          "title": "Generator.prototype.throw()",
          "slug": "generator-prototype-throw"
        },
        {
          "level": 2,
          "title": "Generator.prototype.return()",
          "slug": "generator-prototype-return"
        },
        {
          "level": 2,
          "title": "next()、throw()、return() 的共同点",
          "slug": "next-、throw-、return-的共同点"
        },
        {
          "level": 2,
          "title": "yield* 表达式",
          "slug": "yield-表达式-2"
        },
        {
          "level": 2,
          "title": "作为对象属性的 Generator 函数",
          "slug": "作为对象属性的-generator-函数"
        },
        {
          "level": 2,
          "title": "Generator 函数的this",
          "slug": "generator-函数的this"
        },
        {
          "level": 2,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 3,
          "title": "Generator 与状态机",
          "slug": "generator-与状态机"
        },
        {
          "level": 3,
          "title": "Generator 与协程",
          "slug": "generator-与协程"
        },
        {
          "level": 3,
          "title": "Generator 与上下文",
          "slug": "generator-与上下文"
        },
        {
          "level": 2,
          "title": "应用",
          "slug": "应用"
        },
        {
          "level": 3,
          "title": "（1）异步操作的同步化表达",
          "slug": "（1）异步操作的同步化表达"
        },
        {
          "level": 3,
          "title": "（2）控制流管理",
          "slug": "（2）控制流管理"
        },
        {
          "level": 3,
          "title": "（3）部署 Iterator 接口",
          "slug": "（3）部署-iterator-接口"
        },
        {
          "level": 3,
          "title": "（4）作为数据结构",
          "slug": "（4）作为数据结构"
        }
      ],
      "excerpt": "<h1 id=\"generator-函数的语法\"><a class=\"header-anchor\" href=\"#generator-函数的语法\">#</a> Generator 函数的语法</h1>\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"基本概念\"><a class=\"header-anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p>Generator 函数是 ES6 提供的一种<strong>异步编程解决方案</strong>，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。</p>\n"
    },
    {
      "title": "ArrayBuffer",
      "frontmatter": {
        "title": "ArrayBuffer",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/a2ba314746bfdbdd",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/28.ArrayBuffer.html",
      "relativePath": "《ES6 教程》笔记/28.ArrayBuffer.md",
      "key": "v-386c7cb0",
      "path": "/pages/a2ba314746bfdbdd/",
      "headers": [
        {
          "level": 2,
          "title": "ArrayBuffer 对象",
          "slug": "arraybuffer-对象"
        },
        {
          "level": 3,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 3,
          "title": "ArrayBuffer.prototype.byteLength",
          "slug": "arraybuffer-prototype-bytelength"
        },
        {
          "level": 3,
          "title": "ArrayBuffer.prototype.slice()",
          "slug": "arraybuffer-prototype-slice"
        },
        {
          "level": 3,
          "title": "ArrayBuffer.isView()",
          "slug": "arraybuffer-isview"
        },
        {
          "level": 2,
          "title": "TypedArray 视图",
          "slug": "typedarray-视图"
        },
        {
          "level": 3,
          "title": "概述",
          "slug": "概述-2"
        },
        {
          "level": 3,
          "title": "构造函数",
          "slug": "构造函数"
        },
        {
          "level": 3,
          "title": "数组方法",
          "slug": "数组方法"
        },
        {
          "level": 3,
          "title": "字节序",
          "slug": "字节序"
        },
        {
          "level": 3,
          "title": "BYTESPERELEMENT 属性",
          "slug": "bytes-per-element-属性"
        },
        {
          "level": 3,
          "title": "ArrayBuffer 与字符串的互相转换",
          "slug": "arraybuffer-与字符串的互相转换"
        },
        {
          "level": 3,
          "title": "溢出",
          "slug": "溢出"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.buffer",
          "slug": "typedarray-prototype-buffer"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.byteLength，TypedArray.prototype.byteOffset",
          "slug": "typedarray-prototype-bytelength，typedarray-prototype-byteoffset"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.length",
          "slug": "typedarray-prototype-length"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.set()",
          "slug": "typedarray-prototype-set"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.subarray()",
          "slug": "typedarray-prototype-subarray"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.slice()",
          "slug": "typedarray-prototype-slice"
        },
        {
          "level": 3,
          "title": "TypedArray.of()",
          "slug": "typedarray-of"
        },
        {
          "level": 3,
          "title": "TypedArray.from()",
          "slug": "typedarray-from"
        },
        {
          "level": 2,
          "title": "复合视图",
          "slug": "复合视图"
        },
        {
          "level": 2,
          "title": "DataView 视图",
          "slug": "dataview-视图"
        },
        {
          "level": 2,
          "title": "二进制数组的应用",
          "slug": "二进制数组的应用"
        },
        {
          "level": 3,
          "title": "AJAX",
          "slug": "ajax"
        },
        {
          "level": 3,
          "title": "Canvas",
          "slug": "canvas"
        },
        {
          "level": 3,
          "title": "WebSocket",
          "slug": "websocket"
        },
        {
          "level": 3,
          "title": "Fetch API",
          "slug": "fetch-api"
        },
        {
          "level": 3,
          "title": "File API",
          "slug": "file-api"
        },
        {
          "level": 2,
          "title": "SharedArrayBuffer",
          "slug": "sharedarraybuffer"
        },
        {
          "level": 2,
          "title": "Atomics 对象",
          "slug": "atomics-对象"
        }
      ],
      "excerpt": "<h1 id=\"arraybuffer\"><a class=\"header-anchor\" href=\"#arraybuffer\">#</a> ArrayBuffer</h1>\n<p><code>ArrayBuffer</code>对象、<code>TypedArray</code>视图和<code>DataView</code>视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。</p>\n"
    },
    {
      "title": "小程序笔记",
      "frontmatter": {
        "title": "小程序笔记",
        "date": "2019-12-25T14:27:01.000Z",
        "permalink": "/note/wx-miniprogram",
        "tags": [
          null
        ],
        "categories": [
          "前端",
          "学习笔记"
        ]
      },
      "regularPath": "/01.%E5%89%8D%E7%AB%AF/40.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/40.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0.html",
      "relativePath": "01.前端/40.学习笔记/40.小程序笔记.md",
      "key": "v-5f1131c7",
      "path": "/note/wx-miniprogram/",
      "headers": [
        {
          "level": 2,
          "title": "基础课程部分",
          "slug": "基础课程部分"
        },
        {
          "level": 2,
          "title": "实战课程部分",
          "slug": "实战课程部分"
        },
        {
          "level": 2,
          "title": "《发现》页面",
          "slug": "《发现》页面"
        },
        {
          "level": 2,
          "title": "《我的》页面",
          "slug": "《我的》页面"
        },
        {
          "level": 3,
          "title": "版本更新检测",
          "slug": "版本更新检测"
        },
        {
          "level": 3,
          "title": "性能优化",
          "slug": "性能优化"
        },
        {
          "level": 3,
          "title": "场景值 scene 的作用与应用场景",
          "slug": "场景值-scene-的作用与应用场景"
        },
        {
          "level": 3,
          "title": "小程序的\"SEO\"---页面收录 sitemap",
          "slug": "小程序的-seo-页面收录-sitemap"
        },
        {
          "level": 3,
          "title": "小程序上线审核流程",
          "slug": "小程序上线审核流程"
        },
        {
          "level": 2,
          "title": "后台管理系统",
          "slug": "后台管理系统"
        }
      ]
    }
  ],
  "themeConfig": {
    "nav": [
      {
        "text": "首页",
        "link": "/"
      },
      {
        "text": "前端",
        "link": "/web/",
        "items": [
          {
            "text": "前端文章",
            "items": [
              {
                "text": "JavaScript",
                "link": "/pages/8143cc480faf9a11/"
              },
              {
                "text": "Vue",
                "link": "/pages/802a1ca6f7b71c59/"
              }
            ]
          },
          {
            "text": "学习笔记",
            "items": [
              {
                "text": "《JavaScript教程》笔记",
                "link": "/note/javascript/"
              },
              {
                "text": "《JavaScript高级程序设计》笔记",
                "link": "/note/js/"
              },
              {
                "text": "《ES6 教程》笔记",
                "link": "/note/es6/"
              },
              {
                "text": "《Vue》笔记",
                "link": "/note/vue/"
              },
              {
                "text": "《TypeScript 从零实现 axios》",
                "link": "/note/typescript-axios/"
              },
              {
                "text": "小程序笔记",
                "link": "/note/wx-miniprogram/"
              }
            ]
          }
        ]
      },
      {
        "text": "页面",
        "link": "/ui/",
        "items": [
          {
            "text": "HTML",
            "link": "/pages/8309a5b876fc95e3/"
          },
          {
            "text": "CSS",
            "link": "/pages/0a83b083bdf257cb/"
          }
        ]
      },
      {
        "text": "技术",
        "link": "/technology/",
        "items": [
          {
            "text": "技术文档",
            "link": "/pages/9a7ee40fc232253e/"
          },
          {
            "text": "GitHub技巧",
            "link": "/pages/4c778760be26d8b3/"
          },
          {
            "text": "Nodejs",
            "link": "/pages/117708e0af7f0bd9/"
          },
          {
            "text": "博客搭建",
            "link": "/pages/41f87d890d0a02af/"
          }
        ]
      },
      {
        "text": "更多",
        "link": "/more/",
        "items": [
          {
            "text": "学习",
            "link": "/pages/f2a556/"
          },
          {
            "text": "面试",
            "link": "/pages/aea6571b7a8bae86/"
          },
          {
            "text": "心情杂货",
            "link": "/pages/2d615df9a36a98ed/"
          },
          {
            "text": "友情链接",
            "link": "/friends/"
          }
        ]
      },
      {
        "text": "关于",
        "link": "/about/"
      }
    ],
    "sidebarDepth": 2,
    "logo": "/img/EB-logo.png",
    "repo": "i-lumi/blog",
    "searchMaxSuggestions": 10,
    "lastUpdated": "上次更新",
    "docsDir": "docs",
    "editLinks": true,
    "editLinkText": "编辑",
    "sidebar": {
      "/00.目录页/": [
        [
          "01.前端.md",
          "前端",
          "/web"
        ],
        [
          "02.页面.md",
          "页面",
          "/ui"
        ],
        [
          "03.技术.md",
          "技术",
          "/technology"
        ],
        [
          "04.更多.md",
          "更多",
          "/more"
        ]
      ],
      "catalogue": {
        "前端": "/web",
        "页面": "/ui",
        "技术": "/technology",
        "更多": "/more",
        "《JavaScript教程》笔记": "/note/javascript",
        "《ES6 教程》笔记": "/note/es6",
        "《Vue》笔记": "/note/vue",
        "《TypeScript 从零实现 axios》": "/note/typescript-axios"
      },
      "/01.前端/": [
        {
          "title": "JavaScript文章",
          "collapsable": true,
          "children": [
            [
              "25.JavaScript文章/02.new命令原理.md",
              "new命令原理",
              "/pages/8143cc480faf9a11"
            ]
          ]
        },
        {
          "title": "Vue文章",
          "collapsable": true,
          "children": [
            [
              "30.Vue文章/10.Vue项目开发前的一些准备工作.md",
              "Vue项目开发前的一些准备工作",
              "/pages/802a1ca6f7b71c59"
            ]
          ]
        },
        {
          "title": "学习笔记",
          "collapsable": true,
          "children": [
            [
              "40.学习笔记/00.《JavaScript教程》笔记.md",
              "《JavaScript教程》笔记",
              "/note/javascript"
            ],
            [
              "40.学习笔记/05.《JavaScript高级程序设计》笔记.md",
              "《JavaScript高级程序设计》笔记",
              "/note/js/"
            ],
            [
              "40.学习笔记/10.《ES6 教程》笔记.md",
              "《ES6 教程》笔记",
              "/note/es6"
            ],
            [
              "40.学习笔记/20.《Vue》笔记.md",
              "《Vue》笔记",
              "/note/vue"
            ],
            [
              "40.学习笔记/30.《TypeScript 从零实现 axios》.md",
              "《TypeScript 从零实现 axios》",
              "/note/typescript-axios"
            ],
            [
              "40.学习笔记/40.小程序笔记.md",
              "小程序笔记",
              "/note/wx-miniprogram"
            ]
          ]
        }
      ],
      "/02.页面/": [
        {
          "title": "HTML",
          "collapsable": true,
          "children": [
            [
              "10.HTML/10.常用meta整理.md",
              "常用meta整理",
              "/pages/8309a5b876fc95e3"
            ]
          ]
        },
        {
          "title": "CSS",
          "collapsable": true,
          "children": [
            [
              "20.CSS/00.CSS教程和技巧收藏.md",
              "CSS教程和技巧收藏",
              "/pages/c8f128/"
            ]
          ]
        },
        {
          "title": "stylus",
          "collapsable": true,
          "children": [
            [
              "25.stylus/10.混入(Mixins).md",
              "混入(Mixins)",
              "/pages/9f15c1a281d8bedb"
            ]
          ]
        }
      ],
      "/03.技术/": [
        {
          "title": "技术文档",
          "collapsable": true,
          "children": [
            [
              "01.技术文档/01.Git使用手册.md",
              "Git使用手册",
              "/pages/9a7ee40fc232253e"
            ],
            [
              "01.技术文档/02.Markdown使用教程.md",
              "Markdown使用教程",
              "/pages/ad247c4332211551"
            ],
            [
              "01.技术文档/03.npm常用命令.md",
              "npm常用命令",
              "/pages/61f2f95fd7da14fd"
            ],
            [
              "01.技术文档/10.npm packageJson属性详解.md",
              "npm packageJson属性详解",
              "/pages/dec4f3f00e71a312"
            ],
            [
              "01.技术文档/15.yaml语言教程.md",
              "yaml语言教程",
              "/pages/4e8444e2d534d14f"
            ]
          ]
        }
      ],
      "/04.更多/": [
        {
          "title": "学习",
          "collapsable": true,
          "children": [
            [
              "01.学习/00.费曼学习法.md",
              "费曼学习法",
              "/pages/f2a556/"
            ]
          ]
        },
        [
          "99.友情链接.md",
          "友情链接",
          "/friends"
        ]
      ],
      "/05.关于/": [
        [
          "01.关于.md",
          "关于",
          "/about"
        ]
      ],
      "/《ES6 教程》笔记/": [
        [
          "01.ECMAScript 6 简介.md",
          "ECMAScript 6 简介",
          "/pages/f344d070a1031ef7"
        ],
        [
          "02.let 和 const 命令.md",
          "let 和 const 命令",
          "/pages/c1edd70a6b7c7872"
        ],
        [
          "03.变量的解构赋值.md",
          "变量的解构赋值",
          "/pages/b1ab10a62f7564da"
        ],
        [
          "04.字符串的扩展.md",
          "字符串的扩展",
          "/pages/ca89eca8adeba5f4"
        ],
        [
          "05.字符串的新增方法.md",
          "字符串的新增方法",
          "/pages/a650b4a0ebfc9350"
        ],
        [
          "06.正则的扩展.md",
          "正则的扩展",
          "/pages/0473261a6ab0ee8c"
        ],
        [
          "07.数值的扩展.md",
          "数值的扩展",
          "/pages/5dfea9a0f2d1a392"
        ],
        [
          "08.函数的扩展.md",
          "函数的扩展",
          "/pages/8ed309d668b20264"
        ],
        [
          "09.数组的扩展.md",
          "数组的扩展",
          "/pages/e34009d60d8bc4b2"
        ],
        [
          "10.对象的扩展.md",
          "对象的扩展",
          "/pages/b5e3e0a0ff6e9c25"
        ],
        [
          "11.对象的新增方法.md",
          "对象的新增方法",
          "/pages/e85e68947502cf90"
        ],
        [
          "12.Symbol.md",
          "Symbol",
          "/pages/02c86eb2792f3262"
        ],
        [
          "13.Set 和 Map 数据结构.md",
          "Set 和 Map 数据结构",
          "/pages/0c21dae358fca16b"
        ],
        [
          "14.Proxy.md",
          "Proxy",
          "/pages/f56ec2ab97d60483"
        ],
        [
          "15.Reflect.md",
          "Reflect",
          "/pages/74de3e45e4491e95"
        ],
        [
          "16.Promise 对象.md",
          "Promise 对象",
          "/pages/2810ae8985e9bd52"
        ],
        [
          "17.Iterator 和 for-of 循环.md",
          "Iterator 和 for-of 循环",
          "/pages/48df907ad3570f3d"
        ],
        [
          "18.Generator 函数的语法.md",
          "Generator 函数的语法",
          "/pages/718b48ed9ce0adce"
        ],
        [
          "19.Generator 函数的异步应用.md",
          "Generator 函数的异步应用",
          "/pages/75af7031eb66847b"
        ],
        [
          "20.async 函数.md",
          "async 函数",
          "/pages/3777253e65bac487"
        ],
        [
          "21.Class 的基本语法.md",
          "Class 的基本语法",
          "/pages/e831e1593c82bbe0"
        ],
        [
          "22.Class 的继承.md",
          "Class 的继承",
          "/pages/83f8c3a0cd87dd83"
        ],
        [
          "23.Module 的语法.md",
          "Module 的语法",
          "/pages/efe2fb04eb8ac5fb"
        ],
        [
          "24.Module 的加载实现.md",
          "Module 的加载实现",
          "/pages/a79ca2e64ceae213"
        ],
        [
          "25.编程风格.md",
          "编程风格",
          "/pages/984bf549204bb266"
        ],
        [
          "26.读懂 ECMAScript 规格.md",
          "读懂 ECMAScript 规格",
          "/pages/32c35f7651d6e58e"
        ],
        [
          "27.异步遍历器.md",
          "异步遍历器",
          "/pages/16121351be68691b"
        ],
        [
          "28.ArrayBuffer.md",
          "ArrayBuffer",
          "/pages/a2ba314746bfdbdd"
        ],
        [
          "29.最新提案.md",
          "最新提案",
          "/pages/7188882b8d65af1b"
        ],
        [
          "30.装饰器.md",
          "装饰器",
          "/pages/e97bc1e5626b082c"
        ],
        [
          "31.函数式编程.md",
          "函数式编程",
          "/pages/1cf50330655efc69"
        ],
        [
          "32.Mixin.md",
          "Mixin",
          "/pages/6a8e2dc558da1b39"
        ],
        [
          "33.SIMD.md",
          "SIMD",
          "/pages/8e8f80f69b775a56"
        ],
        [
          "34.参考链接.md",
          "参考链接",
          "/pages/ea6f3b870f6dab69"
        ]
      ],
      "/《JavaScript教程》笔记/": [
        [
          "01.基础.md",
          "基础",
          "/pages/0796ba76b4b55368"
        ]
      ],
      "/《TypeScript 从零实现 axios》/": [
        {
          "title": "初识 TypeScript",
          "collapsable": true,
          "children": [
            [
              "01.初识 TypeScript/01.简介.md",
              "简介",
              "/pages/e05dce83e5129785"
            ],
            [
              "01.初识 TypeScript/02.安装 TypeScript.md",
              "安装 TypeScript",
              "/pages/064e0f7b6b6142c8"
            ],
            [
              "01.初识 TypeScript/03.编写第一个 TypeScript 程序.md",
              "编写第一个 TypeScript 程序",
              "/pages/c85249f40e7a3517"
            ]
          ]
        },
        {
          "title": "TypeScript 常用语法",
          "collapsable": true,
          "children": [
            [
              "02.TypeScript 常用语法/01.基础类型.md",
              "基础类型",
              "/pages/28672e2743bbc3a7"
            ],
            [
              "02.TypeScript 常用语法/02.变量声明.md",
              "变量声明",
              "/pages/54add7f5cf78088e"
            ],
            [
              "02.TypeScript 常用语法/03.接口.md",
              "接口",
              "/pages/54ea89b497ec3bb3"
            ],
            [
              "02.TypeScript 常用语法/04.类.md",
              "类",
              "/pages/fad060bd9a8bfac6"
            ],
            [
              "02.TypeScript 常用语法/05.函数.md",
              "函数",
              "/pages/870a51ba2a9edfad"
            ],
            [
              "02.TypeScript 常用语法/06.泛型.md",
              "泛型",
              "/pages/8045759ec4ad3c01"
            ],
            [
              "02.TypeScript 常用语法/07.类型推断.md",
              "类型推断",
              "/pages/7279420c899c505d"
            ],
            [
              "02.TypeScript 常用语法/08.高级类型.md",
              "高级类型",
              "/pages/3fb6c2f52ab398e3"
            ]
          ]
        },
        {
          "title": "ts-axios 项目初始化",
          "collapsable": true,
          "children": [
            [
              "03.ts-axios 项目初始化/01.需求分析.md",
              "需求分析",
              "/pages/195af93fcc871b8b"
            ],
            [
              "03.ts-axios 项目初始化/02.初始化项目.md",
              "初始化项目",
              "/pages/6e11ac76475a2b3e"
            ],
            [
              "03.ts-axios 项目初始化/03.编写基础请求代码.md",
              "编写基础请求代码",
              "/pages/acfe1e0b401fa984"
            ]
          ]
        },
        {
          "title": "ts-axios 基础功能实现",
          "collapsable": true,
          "children": [
            [
              "04.ts-axios 基础功能实现/01.处理请求 url 参数.md",
              "处理请求 url 参数",
              "/pages/1313dae575f6dddf"
            ],
            [
              "04.ts-axios 基础功能实现/02.处理请求 body 数据.md",
              "处理请求 body 数据",
              "/pages/887cd0918e2543d8"
            ],
            [
              "04.ts-axios 基础功能实现/03.处理请求 header.md",
              "处理请求 header",
              "/pages/35c0ec1bb0b0faaf"
            ],
            [
              "04.ts-axios 基础功能实现/04.获取响应数据.md",
              "获取响应数据",
              "/pages/a57debe141e1e4f4"
            ],
            [
              "04.ts-axios 基础功能实现/05.处理响应 header.md",
              "处理响应 header",
              "/pages/927161662ca32c24"
            ],
            [
              "04.ts-axios 基础功能实现/06.处理响应 data.md",
              "处理响应 data",
              "/pages/922cb4268499dc3f"
            ]
          ]
        },
        {
          "title": "ts-axios 异常情况处理",
          "collapsable": true,
          "children": [
            [
              "05.ts-axios 异常情况处理/01.错误处理.md",
              "错误处理",
              "/pages/6a8bef7b98dfdcf9"
            ],
            [
              "05.ts-axios 异常情况处理/02.错误信息增强.md",
              "错误信息增强",
              "/pages/22d581d8c2860b8a"
            ]
          ]
        },
        {
          "title": "ts-axios 接口扩展",
          "collapsable": true,
          "children": [
            [
              "06.ts-axios 接口扩展/01.扩展接口.md",
              "扩展接口",
              "/pages/034e320f4af88bd4"
            ],
            [
              "06.ts-axios 接口扩展/02.axios 函数重载.md",
              "axios 函数重载",
              "/pages/8af227eae851ec97"
            ],
            [
              "06.ts-axios 接口扩展/03.响应数据支持泛型.md",
              "响应数据支持泛型",
              "/pages/c4489d0bab02cc0c"
            ]
          ]
        },
        {
          "title": "ts-axios 拦截器实现",
          "collapsable": true,
          "children": [
            [
              "07.ts-axios 拦截器实现/01.拦截器设计与实现.md",
              "拦截器设计与实现",
              "/pages/70651900f022f586"
            ]
          ]
        },
        {
          "title": "ts-axios 配置化实现",
          "collapsable": true,
          "children": [
            [
              "08.ts-axios 配置化实现/01.合并配置的设计与实现.md",
              "合并配置的设计与实现",
              "/pages/937e4de6b81edeca"
            ],
            [
              "08.ts-axios 配置化实现/02.请求和响应配置化.md",
              "请求和响应配置化",
              "/pages/f5b627bfebba87fc"
            ],
            [
              "08.ts-axios 配置化实现/03.扩展 create 静态接口.md",
              "扩展 create 静态接口",
              "/pages/7b49658c26f613bf"
            ]
          ]
        },
        {
          "title": "ts-axios 取消功能实现",
          "collapsable": true,
          "children": [
            [
              "09.ts-axios 取消功能实现/01.取消功能的设计与实现.md",
              "取消功能的设计与实现",
              "/pages/fdc6da5372397430"
            ]
          ]
        },
        {
          "title": "ts-axios 更多功能实现",
          "collapsable": true,
          "children": [
            [
              "10.ts-axios 更多功能实现/01.withCredentials.md",
              "withCredentials",
              "/pages/5dce43eba796a2ab"
            ],
            [
              "10.ts-axios 更多功能实现/02.XSRF 防御.md",
              "XSRF 防御",
              "/pages/390cb70e2b619449"
            ],
            [
              "10.ts-axios 更多功能实现/03.上传和下载的进度监控.md",
              "上传和下载的进度监控",
              "/pages/1376fd897809036e"
            ],
            [
              "10.ts-axios 更多功能实现/04.HTTP 授权.md",
              "HTTP 授权",
              "/pages/89cd6496c23159ae"
            ],
            [
              "10.ts-axios 更多功能实现/05.自定义合法状态码.md",
              "自定义合法状态码",
              "/pages/40b41ce8e8159567"
            ],
            [
              "10.ts-axios 更多功能实现/06.自定义参数序列化.md",
              "自定义参数序列化",
              "/pages/7753b8141663e54a"
            ],
            [
              "10.ts-axios 更多功能实现/07.baseURL.md",
              "baseURL",
              "/pages/0b9f2ee2b4dbb728"
            ],
            [
              "10.ts-axios 更多功能实现/08.静态方法扩展.md",
              "静态方法扩展",
              "/pages/c26b053540a7dafa"
            ]
          ]
        },
        {
          "title": "ts-axios 单元测试",
          "collapsable": true,
          "children": [
            [
              "11.ts-axios 单元测试/01.前言.md",
              "前言",
              "/pages/df36888424843793"
            ],
            [
              "11.ts-axios 单元测试/02.Jest 安装和配置.md",
              "Jest 安装和配置",
              "/pages/bf5c625a35757b37"
            ],
            [
              "11.ts-axios 单元测试/03.辅助模块单元测试.md",
              "辅助模块单元测试",
              "/pages/13f147a9b355c4c1"
            ],
            [
              "11.ts-axios 单元测试/04.请求模块单元测试.md",
              "请求模块单元测试",
              "/pages/e1d15dec8634e6b5"
            ],
            [
              "11.ts-axios 单元测试/05.headers 模块单元测试.md",
              "headers 模块单元测试",
              "/pages/ddd86ec39b5dfe33"
            ],
            [
              "11.ts-axios 单元测试/06.Axios 实例模块单元测试.md",
              "Axios 实例模块单元测试",
              "/pages/2eac7a0a0d644c15"
            ],
            [
              "11.ts-axios 单元测试/07.拦截器模块单元测试.md",
              "拦截器模块单元测试",
              "/pages/97de6fd6293a2c6e"
            ],
            [
              "11.ts-axios 单元测试/08.mergeConfig 模块单元测试.md",
              "mergeConfig 模块单元测试",
              "/pages/cdf59840306f9e81"
            ],
            [
              "11.ts-axios 单元测试/09.请求取消模块单元测试.md",
              "请求取消模块单元测试",
              "/pages/6fa16aee29527032"
            ],
            [
              "11.ts-axios 单元测试/10.剩余模块单元测试.md",
              "剩余模块单元测试",
              "/pages/9572134781ba6a25"
            ]
          ]
        },
        {
          "title": "ts-axios 部署与发布",
          "collapsable": true,
          "children": [
            [
              "12.ts-axios 部署与发布/01.ts-axios 编译与发布.md",
              "ts-axios 编译与发布",
              "/pages/3e5d5a45ad50f198"
            ],
            [
              "12.ts-axios 部署与发布/02.引用 ts-axios 库.md",
              "引用 ts-axios 库",
              "/pages/c6bdbd5bd60adf5a"
            ]
          ]
        }
      ],
      "/《Vue》笔记/": [
        {
          "title": "基础",
          "collapsable": true,
          "children": [
            [
              "01.基础/00.MVVM模式.md",
              "MVVM模式",
              "/pages/114158caa9e96df0"
            ]
          ]
        },
        {
          "title": "组件",
          "collapsable": true,
          "children": [
            [
              "02.组件/36.使用组件的细节点.md",
              "使用组件的细节点",
              "/pages/83a1ab785e7fd70c"
            ]
          ]
        },
        {
          "title": "过渡&动画",
          "collapsable": true,
          "children": [
            [
              "03.过渡&动画/110.transition过渡&动画.md",
              "transition过渡&动画",
              "/pages/184a96b493a97078"
            ]
          ]
        },
        {
          "title": "可复用性&组合",
          "collapsable": true,
          "children": [
            [
              "04.可复用性&组合/01.Mixin混入.md",
              "Mixin混入",
              "/pages/bd36a3c1bc3e0821"
            ]
          ]
        },
        {
          "title": "工具",
          "collapsable": true,
          "children": [
            [
              "05.工具/10.Vue CLi v3 创建项目使用记录.md",
              "Vue CLi v3 创建项目使用记录",
              "/pages/d00311f8174119b2"
            ]
          ]
        },
        {
          "title": "规模化",
          "collapsable": true,
          "children": [
            [
              "06.规模化/100.vuex操作相关.md",
              "vuex操作相关",
              "/pages/d9d62d6ab8ff99a6"
            ],
            [
              "06.规模化/140.路由懒加载.md",
              "路由懒加载",
              "/pages/38ecac9a9b92f037"
            ]
          ]
        },
        {
          "title": "Vuex",
          "collapsable": true,
          "children": [
            [
              "10.Vuex/01.Vuex.md",
              "Vuex",
              "/pages/b30620/"
            ]
          ]
        },
        {
          "title": "其他",
          "collapsable": true,
          "children": [
            [
              "99.其他/80.Vue中的防抖函数封装和使用.md",
              "Vue中的防抖函数封装和使用",
              "/pages/fb08e252dfd8fdfd"
            ],
            [
              "99.其他/90.操作本地缓存.md",
              "操作本地缓存",
              "/pages/30a94dbe96873b33"
            ]
          ]
        }
      ]
    },
    "author": {
      "name": "i-lumi",
      "link": "https://github.com/i-lumi"
    },
    "blogger": {
      "avatar": "https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg",
      "name": "i-lumi",
      "slogan": "前端界的小学生"
    },
    "social": {
      "icons": [
        {
          "iconClass": "icon-youjian",
          "title": "发邮件",
          "link": "mailto:996286023@qq.com"
        },
        {
          "iconClass": "icon-github",
          "title": "GitHub",
          "link": "https://github.com/i-lumi"
        },
        {
          "iconClass": "icon-erji",
          "title": "听音乐",
          "link": "https://music.163.com/#/playlist?id=755597173"
        }
      ]
    },
    "footer": {
      "createYear": 2019,
      "copyrightInfo": "i-lumi | <a href=\"https://github.com/i-lumi/blog/blob/master/LICENSE\" target=\"_blank\">MIT License</a>"
    }
  }
}